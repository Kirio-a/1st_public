section,table,task,time_wasted,complexity,query,another_query,additional_query
3.5. Основы. Фильтрация данных,"DROP TABLE IF EXISTS Films; CREATE TABLE Films (     id           INT PRIMARY KEY AUTO_INCREMENT,     title        VARCHAR(20),     director     VARCHAR(20),     release_year INT,     running_time INT );  INSERT INTO Films (title, director, release_year, running_time)  VALUES ('Toy Story 2', 'John Lasseter', 1999, 93),        ('WALL-E', 'Andrew Stanton', 2008, 104),        ('Ratatouille', 'Brad Bird', 2007, 115),        ('Up', 'Pete Docter', 2009, 101),        ('Brave', 'Brenda Chapman', 2012, 102),        ('Monsters University', 'Dan Scanlon', 2013, 110),        ('Cars 2', 'John Lasseter', 2011, 120),        ('Finding Nemo', 'Andrew Stanton', 2003, 107),        ('Toy Story', 'John Lasseter', 1995, 81),        ('The Incredibles', 'Brad Bird', 2004, 116);","Напишите запрос, извлекающий из предложенной базы данных всю информацию о фильмах, идентификатор которых принадлежит диапазону [1; 5] и которые длятся более 100 минут.",5,2,SELECT * FROM Films WHERE id BETWEEN 1 AND 5 AND running_time >= 100,SELECT * FROM Films  WHERE id <= 5 AND running_time > 100,
3.5. Основы. Фильтрация данных,"DROP TABLE IF EXISTS Films; CREATE TABLE Films (     id           INT PRIMARY KEY AUTO_INCREMENT,     title        VARCHAR(20),     director     VARCHAR(20),     release_year INT,     running_time INT );  INSERT INTO Films (title, director, release_year, running_time)  VALUES ('Toy Story 2', 'John Lasseter', 1999, 93),        ('WALL-E', 'Andrew Stanton', 2008, 104),        ('Ratatouille', 'Brad Bird', 2007, 115),        ('Up', 'Pete Docter', 2009, 101),        ('Brave', 'Brenda Chapman', 2012, 102),        ('Monsters University', 'Dan Scanlon', 2013, 110),        ('Cars 2', 'John Lasseter', 2011, 120),        ('Finding Nemo', 'Andrew Stanton', 2003, 107),        ('Toy Story', 'John Lasseter', 1995, 81),        ('The Incredibles', 'Brad Bird', 2004, 116);","Напишите запрос, извлекающий из предложенной базы данных информацию о фильмах (название, имя и фамилия режиссера, год выпуска), режиссером которых является John Lasseter и которые были выпущены до 2000 года.",5,2,"SELECT title, director, release_year FROM Films WHERE director = 'John Lasseter' AND release_year <= 2000 ORDER BY release_year",,
3.5. Основы. Фильтрация данных,"DROP TABLE IF EXISTS Films; CREATE TABLE Films (     id           INT PRIMARY KEY AUTO_INCREMENT,     title        VARCHAR(20),     director     VARCHAR(20),     release_year INT,     running_time INT );  INSERT INTO Films (title, director, release_year, running_time)  VALUES ('Toy Story 2', 'John Lasseter', 1999, 93),        ('WALL-E', 'Andrew Stanton', 2008, 104),        ('Ratatouille', 'Brad Bird', 2007, 115),        ('Up', 'Pete Docter', 2009, 101),        ('Brave', 'Brenda Chapman', 2012, 102),        ('Monsters University', 'Dan Scanlon', 2013, 110),        ('Cars 2', 'John Lasseter', 2011, 120),        ('Finding Nemo', 'Andrew Stanton', 2003, 107),        ('Toy Story', 'John Lasseter', 1995, 81),        ('The Incredibles', 'Brad Bird', 2004, 116);","Напишите запрос, извлекающий из предложенной базы данных информацию о фильмах (название, год выпуска), которые были выпущены в 1999 году или в 2009​​​ ​​​​году.",5,1,"SELECT title, release_year FROM Films WHERE release_year IN (1999, 2009) ORDER BY release_year desc",,
3.5. Основы. Фильтрация данных,"DROP TABLE IF EXISTS Films; CREATE TABLE Films (     id           INT PRIMARY KEY AUTO_INCREMENT,     title        VARCHAR(20),     director     VARCHAR(20),     release_year INT,     running_time INT );  INSERT INTO Films (title, director, release_year, running_time)  VALUES ('Toy Story 2', 'John Lasseter', 1999, 93),        ('WALL-E', 'Andrew Stanton', 2008, 104),        ('Ratatouille', 'Brad Bird', 2007, 115),        ('Up', 'Pete Docter', 2009, 101),        ('Brave', 'Brenda Chapman', 2012, 102),        ('Monsters University', 'Dan Scanlon', 2013, 110),        ('Cars 2', 'John Lasseter', 2011, 120),        ('Finding Nemo', 'Andrew Stanton', 2003, 107),        ('Toy Story', 'John Lasseter', 1995, 81),        ('The Incredibles', 'Brad Bird', 2004, 116);","Напишите запрос, извлекающий из предложенной базы данных информацию о фильмах (название, продолжительность), которые длятся менее 100 минут или более 110 минут.",5,1,"SELECT title, running_time FROM Films WHERE running_time > 110 OR running_time < 100 ORDER BY running_time DESC",,
3.5. Основы. Фильтрация данных,"DROP TABLE IF EXISTS Films; CREATE TABLE Films ( id INT PRIMARY KEY AUTO_INCREMENT, title VARCHAR(20), director VARCHAR(20), release_year INT, running_time INT ); INSERT INTO Films (title, director, release_year, running_time) VALUES ('Toy Story 2', 'John Lasseter', 1999, 93), ('WALL-E', 'Andrew Stanton', 2008, 104), ('Ratatouille', 'Brad Bird', 2007, 115), ('Up', 'Pete Docter', 2009, 101), ('Brave', 'Brenda Chapman', 2012, 102), ('Monsters University', 'Dan Scanlon', 2013, 110), ('Cars 2', 'John Lasseter', 2011, 120), ('Finding Nemo', 'Andrew Stanton', 2003, 107), ('Toy Story', 'John Lasseter', 1995, 81), ('The Incredibles', 'Brad Bird', 2004, 116);","Напишите запрос, извлекающий из предложенной базы данных информацию о фильмах (название, имя и фамилия режиссера, продолжительность), режиссером которых является John Lasseter или Andrew Stanton и которые длятся более 100 минут.",10,1,"SELECT title, director, running_time FROM Films WHERE (director = 'John Lasseter' OR director = 'Andrew Stanton') AND running_time > 100 ORDER BY director, title",,
3.5. Основы. Фильтрация данных,"DROP TABLE IF EXISTS Films; CREATE TABLE Films (     id           INT PRIMARY KEY AUTO_INCREMENT,     title        VARCHAR(20),     director     VARCHAR(20),     release_year INT,     running_time INT );  INSERT INTO Films (title, director, release_year, running_time)  VALUES ('Toy Story 2', 'John Lasseter', 1999, 93),        ('WALL-E', 'Andrew Stanton', 2008, 104),        ('Ratatouille', 'Brad Bird', 2007, 115),        ('Up', 'Pete Docter', 2009, 101),        ('Brave', 'Brenda Chapman', 2012, 102),        ('Monsters University', 'Dan Scanlon', 2013, 110),        ('Cars 2', 'John Lasseter', 2011, 120),        ('Finding Nemo', 'Andrew Stanton', 2003, 107),        ('Toy Story', 'John Lasseter', 1995, 81),        ('The Incredibles', 'Brad Bird', 2004, 116);","Напишите запрос, который извлекает из предложенной базы данных всю информацию о фильмах под названиями WALL-E, Up, Brave и Toy Story.",5,1,"SELECT * FROM Films WHERE title IN ('WALL-E', 'Up', 'Brave', 'Toy Story') ORDER BY release_year ",,
3.5. Основы. Фильтрация данных,"DROP TABLE IF EXISTS Films; CREATE TABLE Films (     id           INT PRIMARY KEY AUTO_INCREMENT,     title        VARCHAR(20),     director     VARCHAR(20),     release_year INT,     running_time INT );  INSERT INTO Films (title, director, release_year, running_time)  VALUES ('Toy Story 2', 'John Lasseter', 1999, 93),        ('WALL-E', 'Andrew Stanton', 2008, 104),        ('Ratatouille', 'Brad Bird', 2007, 115),        ('Up', 'Pete Docter', 2009, 101),        ('Brave', 'Brenda Chapman', 2012, 102),        ('Monsters University', 'Dan Scanlon', 2013, 110),        ('Cars 2', 'John Lasseter', 2011, 120),        ('Finding Nemo', 'Andrew Stanton', 2003, 107),        ('Toy Story', 'John Lasseter', 1995, 81),        ('The Incredibles', 'Brad Bird', 2004, 116);","Напишите запрос, извлекающий из предложенной базы данных информацию о фильмах (название, имя и фамилия режиссера, год выпуска), которые были выпущены не в 2004, 2008 и 2012 годах.",5,1,"SELECT title, director, release_year FROM Films WHERE release_year NOT IN ('2004', '2008', '2012') ORDER BY director, release_year DESC",,
3.6. Основы. Фильтрация данных,"DROP TABLE IF EXISTS Films; CREATE TABLE Films (     id           INT PRIMARY KEY AUTO_INCREMENT,     title        VARCHAR(40),     director     VARCHAR(40) );  INSERT INTO Films (title, director) VALUES ('Toy Story 3', 'Lee Unkrich'),        ('Monsters University', 'Dan Scanlon'),        ('Toy Story 2', 'John Lasseter'),        ('WALL-E', 'Andrew Stanton'),        ('Ratatouille', 'Brad Bird'),        ('Up', 'Pete Docter'),        ('Brave', 'Brenda Chapman'),        ('Finding Nemo', 'Andrew Stanton'),        ('Toy Story', 'John Lasseter'),        ('The Incredibles', 'Brad Bird'); ","Напишите запрос, извлекающий из предложенной базы данных информацию о фильмах (название, имя и фамилия режиссера), которые принадлежат серии Toy Story.",5,1,"SELECT title, director FROM Films WHERE title LIKE 'Toy story%' ORDER BY title",,
3.6. Основы. Фильтрация данных,"DROP TABLE IF EXISTS Films; CREATE TABLE Films (     id           INT PRIMARY KEY AUTO_INCREMENT,     title        VARCHAR(40),     director     VARCHAR(40) );  INSERT INTO Films (title, director) VALUES ('Toy Story 3', 'Lee Unkrich'),        ('Monsters University', 'Dan Scanlon'),        ('Toy Story 2', 'John Lasseter'),        ('WALL-E', 'Andrew Stanton'),        ('Ratatouille', 'Brad Bird'),        ('Up', 'Pete Docter'),        ('Brave', 'Brenda Chapman'),        ('Finding Nemo', 'Andrew Stanton'),        ('Toy Story', 'John Lasseter'),        ('The Incredibles', 'Brad Bird'); ","Напишите запрос, извлекающий из предложенной базы данных уникальные имена и фамилии режиссеров, имена которых начинаются на букву B.",5,1,select distinct director from Films where director like binary 'B%' order by director,,
3.6. Основы. Фильтрация данных,"DROP TABLE IF EXISTS Films; CREATE TABLE Films (     id           INT PRIMARY KEY AUTO_INCREMENT,     title        VARCHAR(40),     director     VARCHAR(40) );  INSERT INTO Films (title, director) VALUES ('Toy Story 3', 'Lee Unkrich'),        ('Monsters University', 'Dan Scanlon'),        ('Toy Story 2', 'John Lasseter'),        ('WALL-E', 'Andrew Stanton'),        ('Ratatouille', 'Brad Bird'),        ('Up', 'Pete Docter'),        ('Brave', 'Brenda Chapman'),        ('Finding Nemo', 'Andrew Stanton'),        ('Toy Story', 'John Lasseter'),        ('The Incredibles', 'Brad Bird'); ","Напишите запрос, извлекающий из предложенной базы данных уникальные имена и фамилии режиссеров, фамилии которых заканчиваются на сочетание букв er.",5,1,select distinct director from Films where director like '%er' order by director,,
3.6. Основы. Фильтрация данных,"DROP TABLE IF EXISTS Films; CREATE TABLE Films (     id           INT PRIMARY KEY AUTO_INCREMENT,     title        VARCHAR(40),     director     VARCHAR(40) );  INSERT INTO Films (title, director) VALUES ('Toy Story 3', 'Lee Unkrich'),        ('Monsters University', 'Dan Scanlon'),        ('Toy Story 2', 'John Lasseter'),        ('WALL-E', 'Andrew Stanton'),        ('Ratatouille', 'Brad Bird'),        ('Up', 'Pete Docter'),        ('Brave', 'Brenda Chapman'),        ('Finding Nemo', 'Andrew Stanton'),        ('Toy Story', 'John Lasseter'),        ('The Incredibles', 'Brad Bird'),        ('Dug Days', 'Bob Peterson');","Напишите запрос, извлекающий из предложенной базы данных уникальные имена и фамилии режиссеров, фамилии которых начинаются на букву S и заканчиваются на букву n.",5,1,select distinct director from Films where director like '% s%n' order by director,,
3.6. Основы. Фильтрация данных,"DROP TABLE IF EXISTS Films; CREATE TABLE Films (     id           INT PRIMARY KEY AUTO_INCREMENT,     title        VARCHAR(40),     director     VARCHAR(40) );  INSERT INTO Films (title, director) VALUES ('Toy Story 3', 'Lee Unkrich'),        ('Monsters University', 'Dan Scanlon'),        ('Toy Story 2', 'John Lasseter'),        ('WALL-E', 'Andrew Stanton'),        ('Ratatouille', 'Brad Bird'),        ('Up', 'Pete Docter'),        ('Brave', 'Brenda Chapman'),        ('Finding Nemo', 'Andrew Stanton'),        ('Toy Story', 'John Lasseter'),        ('The Incredibles', 'Brad Bird'); ","Напишите запрос, извлекающий из предложенной базы данных уникальные имена и фамилии режиссеров, имена которых состоят из четырех букв.",5,1,select distinct director from Films where director like '____ %' order by director,,
3.6. Основы. Фильтрация данных,"DROP TABLE IF EXISTS Films; CREATE TABLE Films (     id           INT PRIMARY KEY AUTO_INCREMENT,     title        VARCHAR(40),     director     VARCHAR(40) );  INSERT INTO Films (title, director) VALUES ('Toy Story 3', 'Lee Unkrich'),        ('Monsters University', 'Dan Scanlon'),        ('Toy Story 2', 'John Lasseter'),        ('WALL-E', 'Andrew Stanton'),        ('Ratatouille', 'Brad Bird'),        ('Up', 'Pete Docter'),        ('Brave', 'Brenda Chapman'),        ('Finding Nemo', 'Andrew Stanton'),        ('Toy Story', 'John Lasseter'),        ('The Incredibles', 'Brad Bird'); ","Напишите запрос, извлекающий из предложенной базы данных уникальные имена и фамилии режиссеров, фамилии которых состоят из семи и более букв.",5,2,select distinct director from Films where director like '% _______%' order by director,,
3.6. Основы. Фильтрация данных,"DROP TABLE IF EXISTS Films; CREATE TABLE Films (     id           INT PRIMARY KEY AUTO_INCREMENT,     title        VARCHAR(40),     director     VARCHAR(40) );  INSERT INTO Films (title, director) VALUES ('Toy Story 3', 'Lee Unkrich'),        ('Monsters University', 'Dan Scanlon'),        ('Toy Story 2', 'John Lasseter'),        ('WALL-E', 'Andrew Stanton'),        ('Ratatouille', 'Brad Bird'),        ('Up', 'Pete Docter'),        ('Brave', 'Brenda Chapman'),        ('Finding Nemo', 'Andrew Stanton'),        ('Toy Story', 'John Lasseter'),        ('The Incredibles', 'Brad Bird'); ","Напишите запрос, извлекающий из предложенной базы данных информацию о фильмах (название, имя и фамилия режиссера), названия которых не содержат строчную букву t.",5,2,"select title, director from Films where title not like binary '%t%' order by title","SELECT title, director FROM Films WHERE NOT title LIKE CAST('%t%' AS BINARY) ORDER BY title;",
3.6. Основы. Фильтрация данных,"DROP TABLE IF EXISTS Films; CREATE TABLE Films (     id           INT PRIMARY KEY AUTO_INCREMENT,     title        VARCHAR(40),     director     VARCHAR(40) );  INSERT INTO Films (title, director) VALUES ('Toy Story 3', 'Lee Unkrich'),        ('Monsters University', 'Dan Scanlon'),        ('Toy Story 2', 'John Lasseter'),        ('WALL-E', 'Andrew Stanton'),        ('Ratatouille', 'Brad Bird'),        ('Up', 'Pete Docter'),        ('Brave', 'Brenda Chapman'),        ('Finding Nemo', 'Andrew Stanton'),        ('Toy Story', 'John Lasseter'),        ('The Incredibles', 'Brad Bird'); ","Напишите запрос, извлекающий из предложенной базы данных информацию о фильмах (название, имя и фамилия режиссера), названия которых состоят из двух и более слов.",5,2,"select title, director from Films where title like '% %' order by title",,
3.6. Основы. Фильтрация данных,"DROP TABLE IF EXISTS Films; CREATE TABLE Films (     id           INT PRIMARY KEY AUTO_INCREMENT,     title        VARCHAR(40),     director     VARCHAR(40) );  INSERT INTO Films (title, director) VALUES ('Toy Story 3', 'Lee Unkrich'),        ('Monsters University', 'Dan Scanlon'),        ('Toy Story 2', 'John Lasseter'),        ('WALL-E', 'Andrew Stanton'),        ('Ratatouille', 'Brad Bird'),        ('Up', 'Pete Docter'),        ('Brave', 'Brenda Chapman'),        ('Finding Nemo', 'Andrew Stanton'),        ('Toy Story', 'John Lasseter'),        ('The Incredibles', 'Brad Bird'); ","Напишите запрос, извлекающий из предложенной базы данных информацию о фильмах (название, имя и фамилия режиссера), названия которых состоят из одного слова.",5,2,"select title, director from Films where title not like '% %' order by title",,
3.7. Создание вычисляемых полей,"DROP TABLE IF EXISTS Films; CREATE TABLE Films (     id        INT PRIMARY KEY AUTO_INCREMENT,     title     VARCHAR(20),     director  VARCHAR(20),     composer  VARCHAR(20),     rating    DECIMAL(2, 1),     price     DECIMAL(3, 2),     purchases INT );  INSERT INTO Films (title, director, composer, rating, price, purchases) VALUES ('Venom', 'Ruben Fleischer', 'Ludwig Goransson', 6.9, 4.99, 2143535),        ('Aladdin', 'Guy Ritchie', 'Alan Menken', 7.3, 3.99, 3253263),        ('Encanto', 'Jared Bush', 'Germaine Franco', 7.5, 2.99, 451245),        ('The Witches', 'Robert Zemeckis', 'Alan Silvestri', 5.7, 1.99, 67441),        ('Blade Runner 2049', 'Denis Villeneuve', 'Benjamin Wallfisch', 7.8, 5.99, 2164214),        ('Equilibrium', 'Kurt Wimmer', 'Klaus Badelt', 7.9, 5.99, 54124561),        ('Ready or Not', 'Matthew Bettinelli', 'Brian Tyler', 6.9, 4.99, 541234),        ('Fast X', 'Louis Leterrier', 'Brian Tyler', 6.1, 3.99, 454113),        ('John Wick', 'Chad Stahelski', 'Tyler Bates', 7.0, 4.99, 1247322),        ('Fight Club', 'David Fincher', 'Dust Brothers', 8.7, 5.99, 17641285);","Напишите запрос, который извлекает из предложенной базы данных идентификаторы и названия всех фильмов.  При этом в результирующей таблице идентификатор и название каждого фильма должны быть указаны в одном поле c псевдонимом movie в следующем формате:  <идентификатор фильма>. <название фильма>",5,1,"select concat(id, '. ', title) as movie from Films",,
3.7. Создание вычисляемых полей,"DROP TABLE IF EXISTS Films; CREATE TABLE Films ( id INT PRIMARY KEY AUTO_INCREMENT, title VARCHAR(20), director VARCHAR(20), composer VARCHAR(20), rating DECIMAL(2, 1), price DECIMAL(3, 2), purchases INT ); INSERT INTO Films (title, director, composer, rating, price, purchases) VALUES ('Venom', 'Ruben Fleischer', 'Ludwig Goransson', 6.9, 4.99, 2143535), ('Aladdin', 'Guy Ritchie', 'Alan Menken', 7.3, 3.99, 3253263), ('Encanto', 'Jared Bush', 'Germaine Franco', 7.5, 2.99, 451245), ('The Witches', 'Robert Zemeckis', 'Alan Silvestri', 5.7, 1.99, 67441), ('Blade Runner 2049', 'Denis Villeneuve', 'Benjamin Wallfisch', 7.8, 5.99, 2164214), ('Equilibrium', 'Kurt Wimmer', 'Klaus Badelt', 7.9, 5.99, 54124561), ('Ready or Not', 'Matthew Bettinelli', 'Brian Tyler', 6.9, 4.99, 541234), ('Fast X', 'Louis Leterrier', 'Brian Tyler', 6.1, 3.99, 454113), ('John Wick', 'Chad Stahelski', 'Tyler Bates', 7.0, 4.99, 1247322), ('Fight Club', 'David Fincher', 'Dust Brothers', 8.7, 5.99, 17641285);",При этом в результирующей таблице идентификатор и название каждого фильма должны быть указаны в одном поле c псевдонимом movie в следующем формате:  <идентификатор фильма>. <название фильма> Цена каждого фильма должна быть записана в следующем формате:  €<цена>,5,1,"select concat(id, '. ', title) as movie, concat('€', price) as price from Films",,
3.7. Создание вычисляемых полей,"DROP TABLE IF EXISTS Films; CREATE TABLE Films (     id        INT PRIMARY KEY AUTO_INCREMENT,     title     VARCHAR(20),     director  VARCHAR(20),     composer  VARCHAR(20),     rating    DECIMAL(2, 1),     price     DECIMAL(3, 2),     purchases INT );  INSERT INTO Films (title, director, composer, rating, price, purchases) VALUES ('Venom', 'Ruben Fleischer', 'Ludwig Goransson', 6.9, 4.99, 2143535),        ('Aladdin', 'Guy Ritchie', 'Alan Menken', 7.3, 3.99, 3253263),        ('Encanto', 'Jared Bush', 'Germaine Franco', 7.5, 2.99, 451245),        ('The Witches', 'Robert Zemeckis', 'Alan Silvestri', 5.7, 1.99, 67441),        ('Blade Runner 2049', 'Denis Villeneuve', 'Benjamin Wallfisch', 7.8, 5.99, 2164214),        ('Equilibrium', 'Kurt Wimmer', 'Klaus Badelt', 7.9, 5.99, 54124561),        ('Ready or Not', 'Matthew Bettinelli', 'Brian Tyler', 6.9, 4.99, 541234),        ('Fast X', 'Louis Leterrier', 'Brian Tyler', 6.1, 3.99, 454113),        ('John Wick', 'Chad Stahelski', 'Tyler Bates', 7.0, 4.99, 1247322),        ('Fight Club', 'David Fincher', 'Dust Brothers', 8.7, 5.99, 17641285); ","Напишите запрос, который извлекает из предложенной базы данных следующую информацию обо всех фильмах: название, имя и фамилия режиссера, имя и фамилия композитора.  При этом в результирующей таблице информация о каждом фильме должна быть указана в одном поле c псевдонимом movie_info в следующем формате:  <название фильма>: <имя и фамилия режиссера>, <имя и фамилия композитора>",5,1,"select concat(title, ': ', director, ', ', composer) as movie_info from Films",,
3.7. Создание вычисляемых полей,"DROP TABLE IF EXISTS Films; CREATE TABLE Films (     id        INT PRIMARY KEY AUTO_INCREMENT,     title     VARCHAR(20),     director  VARCHAR(20),     composer  VARCHAR(20),     rating    DECIMAL(2, 1),     price     DECIMAL(3, 2),     purchases INT );  INSERT INTO Films (title, director, composer, rating, price, purchases) VALUES ('Venom', 'Ruben Fleischer', 'Ludwig Goransson', 6.9, 4.99, 2143535),        ('Aladdin', 'Guy Ritchie', 'Alan Menken', 7.3, 3.99, 3253263),        ('Encanto', 'Jared Bush', 'Germaine Franco', 7.5, 2.99, 451245),        ('The Witches', 'Robert Zemeckis', 'Alan Silvestri', 5.7, 1.99, 67441),        ('Blade Runner 2049', 'Denis Villeneuve', 'Benjamin Wallfisch', 7.8, 5.99, 2164214),        ('Equilibrium', 'Kurt Wimmer', 'Klaus Badelt', 7.9, 5.99, 54124561),        ('Ready or Not', 'Matthew Bettinelli', 'Brian Tyler', 6.9, 4.99, 541234),        ('Fast X', 'Louis Leterrier', 'Brian Tyler', 6.1, 3.99, 454113),        ('John Wick', 'Chad Stahelski', 'Tyler Bates', 7.0, 4.99, 1247322),        ('Fight Club', 'David Fincher', 'Dust Brothers', 8.7, 5.99, 17641285); ","Кинотеатр устанавливает определенную цену для каждого фильма, а также ведет подсчет проданных копий. Прибылью фильма кинотеатр называет произведение цены фильма и количества ее проданных копий.  Напишите запрос, который определяет три самых прибыльных фильма и указывает следующую информацию о них: название, прибыль.",5,2,"select title, price*purchases as profit from Films order by profit desc limit 3",,
3.7. Создание вычисляемых полей,"DROP TABLE IF EXISTS Films; CREATE TABLE Films (     id        INT PRIMARY KEY AUTO_INCREMENT,     title     VARCHAR(20),     director  VARCHAR(20),     composer  VARCHAR(20),     rating    DECIMAL(2, 1),     price     DECIMAL(3, 2),     purchases INT );  INSERT INTO Films (title, director, composer, rating, price, purchases) VALUES ('Venom', 'Ruben Fleischer', 'Ludwig Goransson', 6.9, 4.99, 2143535),        ('Aladdin', 'Guy Ritchie', 'Alan Menken', 7.3, 3.99, 3253263),        ('Encanto', 'Jared Bush', 'Germaine Franco', 7.5, 2.99, 451245),        ('The Witches', 'Robert Zemeckis', 'Alan Silvestri', 5.7, 1.99, 67441),        ('Blade Runner 2049', 'Denis Villeneuve', 'Benjamin Wallfisch', 7.8, 5.99, 2164214),        ('Equilibrium', 'Kurt Wimmer', 'Klaus Badelt', 7.9, 5.99, 54124561),        ('Ready or Not', 'Matthew Bettinelli', 'Brian Tyler', 6.9, 4.99, 541234),        ('Fast X', 'Louis Leterrier', 'Brian Tyler', 6.1, 3.99, 454113),        ('John Wick', 'Chad Stahelski', 'Tyler Bates', 7.0, 4.99, 1247322),        ('Fight Club', 'David Fincher', 'Dust Brothers', 8.7, 5.99, 17641285); ","Напишите запрос, который извлекает из предложенной базы данных названия фильмов и их цены, взятые со скидкой 30%. При этом в результирующую таблицу должны быть добавлены только те фильмы, скидочная цена которых меньше 4 долларов.  Поле со скидочной ценой фильма должно иметь псевдоним discount_price.",10,2,"select title, price*0.7 as discount_price from Films where price*0.7 < 4 order by discount_price",,
3.7. Создание вычисляемых полей,"DROP TABLE IF EXISTS Films; CREATE TABLE Films (     id        INT PRIMARY KEY AUTO_INCREMENT,     title     VARCHAR(20),     director  VARCHAR(20),     composer  VARCHAR(20),     rating    DECIMAL(3, 1),     price     DECIMAL(3, 2),     purchases INT );  INSERT INTO Films (title, director, composer, rating, price, purchases) VALUES ('Venom', 'Ruben Fleischer', 'Ludwig Goransson', 6.9, 4.99, 2143535),        ('Aladdin', 'Guy Ritchie', 'Alan Menken', 7.3, 3.99, 3253263),        ('Encanto', 'Jared Bush', 'Germaine Franco', 7.5, 2.99, 451245),        ('The Witches', 'Robert Zemeckis', 'Alan Silvestri', 5.7, 1.99, 67441),        ('Blade Runner 2049', 'Denis Villeneuve', 'Benjamin Wallfisch', 7.8, 5.99, 2164214),        ('Equilibrium', 'Kurt Wimmer', 'Klaus Badelt', 7.9, 5.99, 54124561),        ('Ready or Not', 'Matthew Bettinelli', 'Brian Tyler', 6.9, 4.99, 541234),        ('Fast X', 'Louis Leterrier', 'Brian Tyler', 6.1, 3.99, 454113),        ('John Wick', 'Chad Stahelski', 'Tyler Bates', 7.0, 4.99, 1247322),        ('Fight Club', 'David Fincher', 'Dust Brothers', 10.0, 5.99, 17641285); ","Напишите запрос, извлекающий из предложенной базы данных информацию о фильмах (идентификатор, название, цена, рейтинг), рейтинг которых больше 7.  При этом в результирующей таблице идентификатор и название каждого фильма должны быть указаны в одном поле c псевдонимом movie в следующем формате:  <идентификатор фильма>. <название фильма> Цена каждого фильма должна быть переведена в евро согласно курсу $1 = €1.1 и указана в поле с псевдонимом price_in_eur в следующем формате:",15,3,"select  concat(id, '. ', title) as movie,  concat('€', price*1.1) as price_in_eur,  concat(rating*10, '%') as score  from Films where rating > 7 order by rating desc",,
