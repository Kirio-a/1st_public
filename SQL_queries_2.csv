section,table,task,time_wasted,complexity,query,another_query,additional_query
3.5. Основы. Фильтрация данных,"DROP TABLE IF EXISTS Films; CREATE TABLE Films (     id           INT PRIMARY KEY AUTO_INCREMENT,     title        VARCHAR(20),     director     VARCHAR(20),     release_year INT,     running_time INT );  INSERT INTO Films (title, director, release_year, running_time)  VALUES ('Toy Story 2', 'John Lasseter', 1999, 93),        ('WALL-E', 'Andrew Stanton', 2008, 104),        ('Ratatouille', 'Brad Bird', 2007, 115),        ('Up', 'Pete Docter', 2009, 101),        ('Brave', 'Brenda Chapman', 2012, 102),        ('Monsters University', 'Dan Scanlon', 2013, 110),        ('Cars 2', 'John Lasseter', 2011, 120),        ('Finding Nemo', 'Andrew Stanton', 2003, 107),        ('Toy Story', 'John Lasseter', 1995, 81),        ('The Incredibles', 'Brad Bird', 2004, 116);","Напишите запрос, извлекающий из предложенной базы данных всю информацию о фильмах, идентификатор которых принадлежит диапазону [1; 5] и которые длятся более 100 минут.",5,2,SELECT * FROM Films WHERE id BETWEEN 1 AND 5 AND running_time >= 100,SELECT * FROM Films  WHERE id <= 5 AND running_time > 100,
3.5. Основы. Фильтрация данных,"DROP TABLE IF EXISTS Films; CREATE TABLE Films (     id           INT PRIMARY KEY AUTO_INCREMENT,     title        VARCHAR(20),     director     VARCHAR(20),     release_year INT,     running_time INT );  INSERT INTO Films (title, director, release_year, running_time)  VALUES ('Toy Story 2', 'John Lasseter', 1999, 93),        ('WALL-E', 'Andrew Stanton', 2008, 104),        ('Ratatouille', 'Brad Bird', 2007, 115),        ('Up', 'Pete Docter', 2009, 101),        ('Brave', 'Brenda Chapman', 2012, 102),        ('Monsters University', 'Dan Scanlon', 2013, 110),        ('Cars 2', 'John Lasseter', 2011, 120),        ('Finding Nemo', 'Andrew Stanton', 2003, 107),        ('Toy Story', 'John Lasseter', 1995, 81),        ('The Incredibles', 'Brad Bird', 2004, 116);","Напишите запрос, извлекающий из предложенной базы данных информацию о фильмах (название, имя и фамилия режиссера, год выпуска), режиссером которых является John Lasseter и которые были выпущены до 2000 года.",5,2,"SELECT title, director, release_year FROM Films WHERE director = 'John Lasseter' AND release_year <= 2000 ORDER BY release_year",,
3.5. Основы. Фильтрация данных,"DROP TABLE IF EXISTS Films; CREATE TABLE Films (     id           INT PRIMARY KEY AUTO_INCREMENT,     title        VARCHAR(20),     director     VARCHAR(20),     release_year INT,     running_time INT );  INSERT INTO Films (title, director, release_year, running_time)  VALUES ('Toy Story 2', 'John Lasseter', 1999, 93),        ('WALL-E', 'Andrew Stanton', 2008, 104),        ('Ratatouille', 'Brad Bird', 2007, 115),        ('Up', 'Pete Docter', 2009, 101),        ('Brave', 'Brenda Chapman', 2012, 102),        ('Monsters University', 'Dan Scanlon', 2013, 110),        ('Cars 2', 'John Lasseter', 2011, 120),        ('Finding Nemo', 'Andrew Stanton', 2003, 107),        ('Toy Story', 'John Lasseter', 1995, 81),        ('The Incredibles', 'Brad Bird', 2004, 116);","Напишите запрос, извлекающий из предложенной базы данных информацию о фильмах (название, год выпуска), которые были выпущены в 1999 году или в 2009​​​ ​​​​году.",5,1,"SELECT title, release_year FROM Films WHERE release_year IN (1999, 2009) ORDER BY release_year desc",,
3.5. Основы. Фильтрация данных,"DROP TABLE IF EXISTS Films; CREATE TABLE Films (     id           INT PRIMARY KEY AUTO_INCREMENT,     title        VARCHAR(20),     director     VARCHAR(20),     release_year INT,     running_time INT );  INSERT INTO Films (title, director, release_year, running_time)  VALUES ('Toy Story 2', 'John Lasseter', 1999, 93),        ('WALL-E', 'Andrew Stanton', 2008, 104),        ('Ratatouille', 'Brad Bird', 2007, 115),        ('Up', 'Pete Docter', 2009, 101),        ('Brave', 'Brenda Chapman', 2012, 102),        ('Monsters University', 'Dan Scanlon', 2013, 110),        ('Cars 2', 'John Lasseter', 2011, 120),        ('Finding Nemo', 'Andrew Stanton', 2003, 107),        ('Toy Story', 'John Lasseter', 1995, 81),        ('The Incredibles', 'Brad Bird', 2004, 116);","Напишите запрос, извлекающий из предложенной базы данных информацию о фильмах (название, продолжительность), которые длятся менее 100 минут или более 110 минут.",5,1,"SELECT title, running_time FROM Films WHERE running_time > 110 OR running_time < 100 ORDER BY running_time DESC",,
3.5. Основы. Фильтрация данных,"DROP TABLE IF EXISTS Films; CREATE TABLE Films ( id INT PRIMARY KEY AUTO_INCREMENT, title VARCHAR(20), director VARCHAR(20), release_year INT, running_time INT ); INSERT INTO Films (title, director, release_year, running_time) VALUES ('Toy Story 2', 'John Lasseter', 1999, 93), ('WALL-E', 'Andrew Stanton', 2008, 104), ('Ratatouille', 'Brad Bird', 2007, 115), ('Up', 'Pete Docter', 2009, 101), ('Brave', 'Brenda Chapman', 2012, 102), ('Monsters University', 'Dan Scanlon', 2013, 110), ('Cars 2', 'John Lasseter', 2011, 120), ('Finding Nemo', 'Andrew Stanton', 2003, 107), ('Toy Story', 'John Lasseter', 1995, 81), ('The Incredibles', 'Brad Bird', 2004, 116);","Напишите запрос, извлекающий из предложенной базы данных информацию о фильмах (название, имя и фамилия режиссера, продолжительность), режиссером которых является John Lasseter или Andrew Stanton и которые длятся более 100 минут.",10,1,"SELECT title, director, running_time FROM Films WHERE (director = 'John Lasseter' OR director = 'Andrew Stanton') AND running_time > 100 ORDER BY director, title",,
3.5. Основы. Фильтрация данных,"DROP TABLE IF EXISTS Films; CREATE TABLE Films (     id           INT PRIMARY KEY AUTO_INCREMENT,     title        VARCHAR(20),     director     VARCHAR(20),     release_year INT,     running_time INT );  INSERT INTO Films (title, director, release_year, running_time)  VALUES ('Toy Story 2', 'John Lasseter', 1999, 93),        ('WALL-E', 'Andrew Stanton', 2008, 104),        ('Ratatouille', 'Brad Bird', 2007, 115),        ('Up', 'Pete Docter', 2009, 101),        ('Brave', 'Brenda Chapman', 2012, 102),        ('Monsters University', 'Dan Scanlon', 2013, 110),        ('Cars 2', 'John Lasseter', 2011, 120),        ('Finding Nemo', 'Andrew Stanton', 2003, 107),        ('Toy Story', 'John Lasseter', 1995, 81),        ('The Incredibles', 'Brad Bird', 2004, 116);","Напишите запрос, который извлекает из предложенной базы данных всю информацию о фильмах под названиями WALL-E, Up, Brave и Toy Story.",5,1,"SELECT * FROM Films WHERE title IN ('WALL-E', 'Up', 'Brave', 'Toy Story') ORDER BY release_year ",,
3.5. Основы. Фильтрация данных,"DROP TABLE IF EXISTS Films; CREATE TABLE Films (     id           INT PRIMARY KEY AUTO_INCREMENT,     title        VARCHAR(20),     director     VARCHAR(20),     release_year INT,     running_time INT );  INSERT INTO Films (title, director, release_year, running_time)  VALUES ('Toy Story 2', 'John Lasseter', 1999, 93),        ('WALL-E', 'Andrew Stanton', 2008, 104),        ('Ratatouille', 'Brad Bird', 2007, 115),        ('Up', 'Pete Docter', 2009, 101),        ('Brave', 'Brenda Chapman', 2012, 102),        ('Monsters University', 'Dan Scanlon', 2013, 110),        ('Cars 2', 'John Lasseter', 2011, 120),        ('Finding Nemo', 'Andrew Stanton', 2003, 107),        ('Toy Story', 'John Lasseter', 1995, 81),        ('The Incredibles', 'Brad Bird', 2004, 116);","Напишите запрос, извлекающий из предложенной базы данных информацию о фильмах (название, имя и фамилия режиссера, год выпуска), которые были выпущены не в 2004, 2008 и 2012 годах.",5,1,"SELECT title, director, release_year FROM Films WHERE release_year NOT IN ('2004', '2008', '2012') ORDER BY director, release_year DESC",,
3.6. Основы. Фильтрация данных,"DROP TABLE IF EXISTS Films; CREATE TABLE Films (     id           INT PRIMARY KEY AUTO_INCREMENT,     title        VARCHAR(40),     director     VARCHAR(40) );  INSERT INTO Films (title, director) VALUES ('Toy Story 3', 'Lee Unkrich'),        ('Monsters University', 'Dan Scanlon'),        ('Toy Story 2', 'John Lasseter'),        ('WALL-E', 'Andrew Stanton'),        ('Ratatouille', 'Brad Bird'),        ('Up', 'Pete Docter'),        ('Brave', 'Brenda Chapman'),        ('Finding Nemo', 'Andrew Stanton'),        ('Toy Story', 'John Lasseter'),        ('The Incredibles', 'Brad Bird'); ","Напишите запрос, извлекающий из предложенной базы данных информацию о фильмах (название, имя и фамилия режиссера), которые принадлежат серии Toy Story.",5,1,"SELECT title, director FROM Films WHERE title LIKE 'Toy story%' ORDER BY title",,
3.6. Основы. Фильтрация данных,"DROP TABLE IF EXISTS Films; CREATE TABLE Films (     id           INT PRIMARY KEY AUTO_INCREMENT,     title        VARCHAR(40),     director     VARCHAR(40) );  INSERT INTO Films (title, director) VALUES ('Toy Story 3', 'Lee Unkrich'),        ('Monsters University', 'Dan Scanlon'),        ('Toy Story 2', 'John Lasseter'),        ('WALL-E', 'Andrew Stanton'),        ('Ratatouille', 'Brad Bird'),        ('Up', 'Pete Docter'),        ('Brave', 'Brenda Chapman'),        ('Finding Nemo', 'Andrew Stanton'),        ('Toy Story', 'John Lasseter'),        ('The Incredibles', 'Brad Bird'); ","Напишите запрос, извлекающий из предложенной базы данных уникальные имена и фамилии режиссеров, имена которых начинаются на букву B.",5,1,select distinct director from Films where director like binary 'B%' order by director,,
3.6. Основы. Фильтрация данных,"DROP TABLE IF EXISTS Films; CREATE TABLE Films (     id           INT PRIMARY KEY AUTO_INCREMENT,     title        VARCHAR(40),     director     VARCHAR(40) );  INSERT INTO Films (title, director) VALUES ('Toy Story 3', 'Lee Unkrich'),        ('Monsters University', 'Dan Scanlon'),        ('Toy Story 2', 'John Lasseter'),        ('WALL-E', 'Andrew Stanton'),        ('Ratatouille', 'Brad Bird'),        ('Up', 'Pete Docter'),        ('Brave', 'Brenda Chapman'),        ('Finding Nemo', 'Andrew Stanton'),        ('Toy Story', 'John Lasseter'),        ('The Incredibles', 'Brad Bird'); ","Напишите запрос, извлекающий из предложенной базы данных уникальные имена и фамилии режиссеров, фамилии которых заканчиваются на сочетание букв er.",5,1,select distinct director from Films where director like '%er' order by director,,
3.6. Основы. Фильтрация данных,"DROP TABLE IF EXISTS Films; CREATE TABLE Films (     id           INT PRIMARY KEY AUTO_INCREMENT,     title        VARCHAR(40),     director     VARCHAR(40) );  INSERT INTO Films (title, director) VALUES ('Toy Story 3', 'Lee Unkrich'),        ('Monsters University', 'Dan Scanlon'),        ('Toy Story 2', 'John Lasseter'),        ('WALL-E', 'Andrew Stanton'),        ('Ratatouille', 'Brad Bird'),        ('Up', 'Pete Docter'),        ('Brave', 'Brenda Chapman'),        ('Finding Nemo', 'Andrew Stanton'),        ('Toy Story', 'John Lasseter'),        ('The Incredibles', 'Brad Bird'),        ('Dug Days', 'Bob Peterson');","Напишите запрос, извлекающий из предложенной базы данных уникальные имена и фамилии режиссеров, фамилии которых начинаются на букву S и заканчиваются на букву n.",5,1,select distinct director from Films where director like '% s%n' order by director,,
3.6. Основы. Фильтрация данных,"DROP TABLE IF EXISTS Films; CREATE TABLE Films (     id           INT PRIMARY KEY AUTO_INCREMENT,     title        VARCHAR(40),     director     VARCHAR(40) );  INSERT INTO Films (title, director) VALUES ('Toy Story 3', 'Lee Unkrich'),        ('Monsters University', 'Dan Scanlon'),        ('Toy Story 2', 'John Lasseter'),        ('WALL-E', 'Andrew Stanton'),        ('Ratatouille', 'Brad Bird'),        ('Up', 'Pete Docter'),        ('Brave', 'Brenda Chapman'),        ('Finding Nemo', 'Andrew Stanton'),        ('Toy Story', 'John Lasseter'),        ('The Incredibles', 'Brad Bird'); ","Напишите запрос, извлекающий из предложенной базы данных уникальные имена и фамилии режиссеров, имена которых состоят из четырех букв.",5,1,select distinct director from Films where director like '____ %' order by director,,
3.6. Основы. Фильтрация данных,"DROP TABLE IF EXISTS Films; CREATE TABLE Films (     id           INT PRIMARY KEY AUTO_INCREMENT,     title        VARCHAR(40),     director     VARCHAR(40) );  INSERT INTO Films (title, director) VALUES ('Toy Story 3', 'Lee Unkrich'),        ('Monsters University', 'Dan Scanlon'),        ('Toy Story 2', 'John Lasseter'),        ('WALL-E', 'Andrew Stanton'),        ('Ratatouille', 'Brad Bird'),        ('Up', 'Pete Docter'),        ('Brave', 'Brenda Chapman'),        ('Finding Nemo', 'Andrew Stanton'),        ('Toy Story', 'John Lasseter'),        ('The Incredibles', 'Brad Bird'); ","Напишите запрос, извлекающий из предложенной базы данных уникальные имена и фамилии режиссеров, фамилии которых состоят из семи и более букв.",5,2,select distinct director from Films where director like '% _______%' order by director,,
3.6. Основы. Фильтрация данных,"DROP TABLE IF EXISTS Films; CREATE TABLE Films (     id           INT PRIMARY KEY AUTO_INCREMENT,     title        VARCHAR(40),     director     VARCHAR(40) );  INSERT INTO Films (title, director) VALUES ('Toy Story 3', 'Lee Unkrich'),        ('Monsters University', 'Dan Scanlon'),        ('Toy Story 2', 'John Lasseter'),        ('WALL-E', 'Andrew Stanton'),        ('Ratatouille', 'Brad Bird'),        ('Up', 'Pete Docter'),        ('Brave', 'Brenda Chapman'),        ('Finding Nemo', 'Andrew Stanton'),        ('Toy Story', 'John Lasseter'),        ('The Incredibles', 'Brad Bird'); ","Напишите запрос, извлекающий из предложенной базы данных информацию о фильмах (название, имя и фамилия режиссера), названия которых не содержат строчную букву t.",5,2,"select title, director from Films where title not like binary '%t%' order by title","SELECT title, director FROM Films WHERE NOT title LIKE CAST('%t%' AS BINARY) ORDER BY title;",
3.6. Основы. Фильтрация данных,"DROP TABLE IF EXISTS Films; CREATE TABLE Films (     id           INT PRIMARY KEY AUTO_INCREMENT,     title        VARCHAR(40),     director     VARCHAR(40) );  INSERT INTO Films (title, director) VALUES ('Toy Story 3', 'Lee Unkrich'),        ('Monsters University', 'Dan Scanlon'),        ('Toy Story 2', 'John Lasseter'),        ('WALL-E', 'Andrew Stanton'),        ('Ratatouille', 'Brad Bird'),        ('Up', 'Pete Docter'),        ('Brave', 'Brenda Chapman'),        ('Finding Nemo', 'Andrew Stanton'),        ('Toy Story', 'John Lasseter'),        ('The Incredibles', 'Brad Bird'); ","Напишите запрос, извлекающий из предложенной базы данных информацию о фильмах (название, имя и фамилия режиссера), названия которых состоят из двух и более слов.",5,2,"select title, director from Films where title like '% %' order by title",,
3.6. Основы. Фильтрация данных,"DROP TABLE IF EXISTS Films; CREATE TABLE Films (     id           INT PRIMARY KEY AUTO_INCREMENT,     title        VARCHAR(40),     director     VARCHAR(40) );  INSERT INTO Films (title, director) VALUES ('Toy Story 3', 'Lee Unkrich'),        ('Monsters University', 'Dan Scanlon'),        ('Toy Story 2', 'John Lasseter'),        ('WALL-E', 'Andrew Stanton'),        ('Ratatouille', 'Brad Bird'),        ('Up', 'Pete Docter'),        ('Brave', 'Brenda Chapman'),        ('Finding Nemo', 'Andrew Stanton'),        ('Toy Story', 'John Lasseter'),        ('The Incredibles', 'Brad Bird'); ","Напишите запрос, извлекающий из предложенной базы данных информацию о фильмах (название, имя и фамилия режиссера), названия которых состоят из одного слова.",5,2,"select title, director from Films where title not like '% %' order by title",,
3.7. Создание вычисляемых полей,"DROP TABLE IF EXISTS Films; CREATE TABLE Films (     id        INT PRIMARY KEY AUTO_INCREMENT,     title     VARCHAR(20),     director  VARCHAR(20),     composer  VARCHAR(20),     rating    DECIMAL(2, 1),     price     DECIMAL(3, 2),     purchases INT );  INSERT INTO Films (title, director, composer, rating, price, purchases) VALUES ('Venom', 'Ruben Fleischer', 'Ludwig Goransson', 6.9, 4.99, 2143535),        ('Aladdin', 'Guy Ritchie', 'Alan Menken', 7.3, 3.99, 3253263),        ('Encanto', 'Jared Bush', 'Germaine Franco', 7.5, 2.99, 451245),        ('The Witches', 'Robert Zemeckis', 'Alan Silvestri', 5.7, 1.99, 67441),        ('Blade Runner 2049', 'Denis Villeneuve', 'Benjamin Wallfisch', 7.8, 5.99, 2164214),        ('Equilibrium', 'Kurt Wimmer', 'Klaus Badelt', 7.9, 5.99, 54124561),        ('Ready or Not', 'Matthew Bettinelli', 'Brian Tyler', 6.9, 4.99, 541234),        ('Fast X', 'Louis Leterrier', 'Brian Tyler', 6.1, 3.99, 454113),        ('John Wick', 'Chad Stahelski', 'Tyler Bates', 7.0, 4.99, 1247322),        ('Fight Club', 'David Fincher', 'Dust Brothers', 8.7, 5.99, 17641285);","Напишите запрос, который извлекает из предложенной базы данных идентификаторы и названия всех фильмов.  При этом в результирующей таблице идентификатор и название каждого фильма должны быть указаны в одном поле c псевдонимом movie в следующем формате:  <идентификатор фильма>. <название фильма>",5,1,"select concat(id, '. ', title) as movie from Films",,
3.7. Создание вычисляемых полей,"DROP TABLE IF EXISTS Films; CREATE TABLE Films ( id INT PRIMARY KEY AUTO_INCREMENT, title VARCHAR(20), director VARCHAR(20), composer VARCHAR(20), rating DECIMAL(2, 1), price DECIMAL(3, 2), purchases INT ); INSERT INTO Films (title, director, composer, rating, price, purchases) VALUES ('Venom', 'Ruben Fleischer', 'Ludwig Goransson', 6.9, 4.99, 2143535), ('Aladdin', 'Guy Ritchie', 'Alan Menken', 7.3, 3.99, 3253263), ('Encanto', 'Jared Bush', 'Germaine Franco', 7.5, 2.99, 451245), ('The Witches', 'Robert Zemeckis', 'Alan Silvestri', 5.7, 1.99, 67441), ('Blade Runner 2049', 'Denis Villeneuve', 'Benjamin Wallfisch', 7.8, 5.99, 2164214), ('Equilibrium', 'Kurt Wimmer', 'Klaus Badelt', 7.9, 5.99, 54124561), ('Ready or Not', 'Matthew Bettinelli', 'Brian Tyler', 6.9, 4.99, 541234), ('Fast X', 'Louis Leterrier', 'Brian Tyler', 6.1, 3.99, 454113), ('John Wick', 'Chad Stahelski', 'Tyler Bates', 7.0, 4.99, 1247322), ('Fight Club', 'David Fincher', 'Dust Brothers', 8.7, 5.99, 17641285);",При этом в результирующей таблице идентификатор и название каждого фильма должны быть указаны в одном поле c псевдонимом movie в следующем формате:  <идентификатор фильма>. <название фильма> Цена каждого фильма должна быть записана в следующем формате:  €<цена>,5,1,"select concat(id, '. ', title) as movie, concat('€', price) as price from Films",,
3.7. Создание вычисляемых полей,"DROP TABLE IF EXISTS Films; CREATE TABLE Films (     id        INT PRIMARY KEY AUTO_INCREMENT,     title     VARCHAR(20),     director  VARCHAR(20),     composer  VARCHAR(20),     rating    DECIMAL(2, 1),     price     DECIMAL(3, 2),     purchases INT );  INSERT INTO Films (title, director, composer, rating, price, purchases) VALUES ('Venom', 'Ruben Fleischer', 'Ludwig Goransson', 6.9, 4.99, 2143535),        ('Aladdin', 'Guy Ritchie', 'Alan Menken', 7.3, 3.99, 3253263),        ('Encanto', 'Jared Bush', 'Germaine Franco', 7.5, 2.99, 451245),        ('The Witches', 'Robert Zemeckis', 'Alan Silvestri', 5.7, 1.99, 67441),        ('Blade Runner 2049', 'Denis Villeneuve', 'Benjamin Wallfisch', 7.8, 5.99, 2164214),        ('Equilibrium', 'Kurt Wimmer', 'Klaus Badelt', 7.9, 5.99, 54124561),        ('Ready or Not', 'Matthew Bettinelli', 'Brian Tyler', 6.9, 4.99, 541234),        ('Fast X', 'Louis Leterrier', 'Brian Tyler', 6.1, 3.99, 454113),        ('John Wick', 'Chad Stahelski', 'Tyler Bates', 7.0, 4.99, 1247322),        ('Fight Club', 'David Fincher', 'Dust Brothers', 8.7, 5.99, 17641285); ","Напишите запрос, который извлекает из предложенной базы данных следующую информацию обо всех фильмах: название, имя и фамилия режиссера, имя и фамилия композитора.  При этом в результирующей таблице информация о каждом фильме должна быть указана в одном поле c псевдонимом movie_info в следующем формате:  <название фильма>: <имя и фамилия режиссера>, <имя и фамилия композитора>",5,1,"select concat(title, ': ', director, ', ', composer) as movie_info from Films",,
3.7. Создание вычисляемых полей,"DROP TABLE IF EXISTS Films; CREATE TABLE Films (     id        INT PRIMARY KEY AUTO_INCREMENT,     title     VARCHAR(20),     director  VARCHAR(20),     composer  VARCHAR(20),     rating    DECIMAL(2, 1),     price     DECIMAL(3, 2),     purchases INT );  INSERT INTO Films (title, director, composer, rating, price, purchases) VALUES ('Venom', 'Ruben Fleischer', 'Ludwig Goransson', 6.9, 4.99, 2143535),        ('Aladdin', 'Guy Ritchie', 'Alan Menken', 7.3, 3.99, 3253263),        ('Encanto', 'Jared Bush', 'Germaine Franco', 7.5, 2.99, 451245),        ('The Witches', 'Robert Zemeckis', 'Alan Silvestri', 5.7, 1.99, 67441),        ('Blade Runner 2049', 'Denis Villeneuve', 'Benjamin Wallfisch', 7.8, 5.99, 2164214),        ('Equilibrium', 'Kurt Wimmer', 'Klaus Badelt', 7.9, 5.99, 54124561),        ('Ready or Not', 'Matthew Bettinelli', 'Brian Tyler', 6.9, 4.99, 541234),        ('Fast X', 'Louis Leterrier', 'Brian Tyler', 6.1, 3.99, 454113),        ('John Wick', 'Chad Stahelski', 'Tyler Bates', 7.0, 4.99, 1247322),        ('Fight Club', 'David Fincher', 'Dust Brothers', 8.7, 5.99, 17641285); ","Кинотеатр устанавливает определенную цену для каждого фильма, а также ведет подсчет проданных копий. Прибылью фильма кинотеатр называет произведение цены фильма и количества ее проданных копий.  Напишите запрос, который определяет три самых прибыльных фильма и указывает следующую информацию о них: название, прибыль.",5,2,"select title, price*purchases as profit from Films order by profit desc limit 3",,
3.7. Создание вычисляемых полей,"DROP TABLE IF EXISTS Films; CREATE TABLE Films (     id        INT PRIMARY KEY AUTO_INCREMENT,     title     VARCHAR(20),     director  VARCHAR(20),     composer  VARCHAR(20),     rating    DECIMAL(2, 1),     price     DECIMAL(3, 2),     purchases INT );  INSERT INTO Films (title, director, composer, rating, price, purchases) VALUES ('Venom', 'Ruben Fleischer', 'Ludwig Goransson', 6.9, 4.99, 2143535),        ('Aladdin', 'Guy Ritchie', 'Alan Menken', 7.3, 3.99, 3253263),        ('Encanto', 'Jared Bush', 'Germaine Franco', 7.5, 2.99, 451245),        ('The Witches', 'Robert Zemeckis', 'Alan Silvestri', 5.7, 1.99, 67441),        ('Blade Runner 2049', 'Denis Villeneuve', 'Benjamin Wallfisch', 7.8, 5.99, 2164214),        ('Equilibrium', 'Kurt Wimmer', 'Klaus Badelt', 7.9, 5.99, 54124561),        ('Ready or Not', 'Matthew Bettinelli', 'Brian Tyler', 6.9, 4.99, 541234),        ('Fast X', 'Louis Leterrier', 'Brian Tyler', 6.1, 3.99, 454113),        ('John Wick', 'Chad Stahelski', 'Tyler Bates', 7.0, 4.99, 1247322),        ('Fight Club', 'David Fincher', 'Dust Brothers', 8.7, 5.99, 17641285); ","Напишите запрос, который извлекает из предложенной базы данных названия фильмов и их цены, взятые со скидкой 30%. При этом в результирующую таблицу должны быть добавлены только те фильмы, скидочная цена которых меньше 4 долларов.  Поле со скидочной ценой фильма должно иметь псевдоним discount_price.",10,2,"select title, price*0.7 as discount_price from Films where price*0.7 < 4 order by discount_price",,
3.7. Создание вычисляемых полей,"DROP TABLE IF EXISTS Films; CREATE TABLE Films (     id        INT PRIMARY KEY AUTO_INCREMENT,     title     VARCHAR(20),     director  VARCHAR(20),     composer  VARCHAR(20),     rating    DECIMAL(3, 1),     price     DECIMAL(3, 2),     purchases INT );  INSERT INTO Films (title, director, composer, rating, price, purchases) VALUES ('Venom', 'Ruben Fleischer', 'Ludwig Goransson', 6.9, 4.99, 2143535),        ('Aladdin', 'Guy Ritchie', 'Alan Menken', 7.3, 3.99, 3253263),        ('Encanto', 'Jared Bush', 'Germaine Franco', 7.5, 2.99, 451245),        ('The Witches', 'Robert Zemeckis', 'Alan Silvestri', 5.7, 1.99, 67441),        ('Blade Runner 2049', 'Denis Villeneuve', 'Benjamin Wallfisch', 7.8, 5.99, 2164214),        ('Equilibrium', 'Kurt Wimmer', 'Klaus Badelt', 7.9, 5.99, 54124561),        ('Ready or Not', 'Matthew Bettinelli', 'Brian Tyler', 6.9, 4.99, 541234),        ('Fast X', 'Louis Leterrier', 'Brian Tyler', 6.1, 3.99, 454113),        ('John Wick', 'Chad Stahelski', 'Tyler Bates', 7.0, 4.99, 1247322),        ('Fight Club', 'David Fincher', 'Dust Brothers', 10.0, 5.99, 17641285); ","Напишите запрос, извлекающий из предложенной базы данных информацию о фильмах (идентификатор, название, цена, рейтинг), рейтинг которых больше 7.  При этом в результирующей таблице идентификатор и название каждого фильма должны быть указаны в одном поле c псевдонимом movie в следующем формате:  <идентификатор фильма>. <название фильма> Цена каждого фильма должна быть переведена в евро согласно курсу $1 = €1.1 и указана в поле с псевдонимом price_in_eur в следующем формате:",15,3,"select  concat(id, '. ', title) as movie,  concat('€', price*1.1) as price_in_eur,  concat(rating*10, '%') as score  from Films where rating > 7 order by rating desc",,
4.1. Текстовые функции,"DROP TABLE IF EXISTS Directors; CREATE TABLE Directors (     id      INT PRIMARY KEY AUTO_INCREMENT,     name    VARCHAR(40),     surname VARCHAR(40),     country VARCHAR(40) );  INSERT INTO Directors (name, surname, country) VALUES ('Christopher', 'Nolan', 'England'),        ('Steven', 'Spielberg', 'USA'),        ('Quentin', 'Tarantino', 'USA'),        ('Martin', 'Scorsese', 'USA'),        ('David', 'Fincher', 'USA'),        ('Ridley', 'Scott', 'England'),        ('Stanley', 'Kubrick', 'USA'),        ('Clint', 'Eastwood', 'USA'),        ('James', 'Cameron', 'Canada'),        ('Tim', 'Burton', 'USA');","Напишите запрос, который извлекает из предложенной базы данных имена всех режиссеров, а также определяет количество символов в имени каждого режиссера.",5,1,"select name, char_length(name) as name_length from Directors order by name_length, name",,
4.1. Текстовые функции,"DROP TABLE IF EXISTS Directors; CREATE TABLE Directors (     id      INT PRIMARY KEY AUTO_INCREMENT,     name    VARCHAR(40),     surname VARCHAR(40),     country VARCHAR(40) );  INSERT INTO Directors (name, surname, country) VALUES ('Christopher', 'Nolan', 'England'),        ('Steven', 'Spielberg', 'USA'),        ('Quentin', 'Tarantino', 'USA'),        ('Martin', 'Scorsese', 'USA'),        ('David', 'Fincher', 'USA'),        ('Ridley', 'Scott', 'England'),        ('Stanley', 'Kubrick', 'USA'),        ('Clint', 'Eastwood', 'USA'),        ('James', 'Cameron', 'Canada'),        ('Tim', 'Burton', 'USA');","Напишите запрос, который извлекает из предложенной базы данных имена и фамилии режиссеров, имя которых состоит из 6 и менее символов.",5,1,"select name, surname from Directors where char_length(name) <= 6 order by name",,
4.1. Текстовые функции,"DROP TABLE IF EXISTS Directors; CREATE TABLE Directors (     id      INT PRIMARY KEY AUTO_INCREMENT,     name    VARCHAR(40),     surname VARCHAR(40),     country VARCHAR(40) );  INSERT INTO Directors (name, surname, country) VALUES ('christopher', 'nolan', 'England'),        ('Steven', 'Spielberg', 'USA'),        ('Quentin', 'tarantino', 'USA'),        ('Martin', 'Scorsese', 'USA'),        ('David', 'Fincher', 'USA'),        ('ridley', 'Scott', 'England'),        ('stanley', 'Kubrick', 'USA'),        ('Clint', 'Eastwood', 'USA'),        ('James', 'cameron', 'Canada'),        ('tim', 'burton', 'USA');","Напишите запрос, который извлекает из предложенной базы данных имена и фамилии режиссеров, имя или фамилия которых записаны в нижнем регистре.",5,3,"select name, surname from Directors where name like binary lower(name) or surname like binary lower(surname) order by name","SELECT name, surname FROM Directors WHERE name LIKE CAST(LOWER(name) AS BINARY) OR       surname LIKE CAST(LOWER(surname) AS BINARY) ORDER BY name;",
4.1. Текстовые функции,"DROP TABLE IF EXISTS Directors; CREATE TABLE Directors (     id      INT PRIMARY KEY AUTO_INCREMENT,     name    VARCHAR(40),     surname VARCHAR(40),     country VARCHAR(40) );  INSERT INTO Directors (name, surname, country) VALUES ('Christopher', 'Nolan', 'England'),        ('Steven', 'Spielberg', 'USA'),        ('Quentin', 'Tarantino', 'USA'),        ('Martin', 'Scorsese', 'USA'),        ('David', 'Fincher', 'USA'),        ('Ridley', 'Scott', 'England'),        ('Stanley', 'Kubrick', 'USA'),        ('Clint', 'Eastwood', 'USA'),        ('James', 'Cameron', 'Canada'),        ('Tim', 'Burton', 'USA');","Напишите запрос, который извлекает из предложенной базы данных следующую информацию обо всех режиссерах: имя, фамилия, страна рождения. При этом в результирующей таблице название страны рождения каждого режиссера должно быть записано в верхнем регистре.",5,1,"select name, surname, upper(country) as country from Directors order by country, name",,
4.1. Текстовые функции,"DROP TABLE IF EXISTS Directors; CREATE TABLE Directors (     id      INT PRIMARY KEY AUTO_INCREMENT,     name    VARCHAR(40),     surname VARCHAR(40),     country VARCHAR(40) );  INSERT INTO Directors (name, surname, country) VALUES ('Christopher', 'Nolan', 'England'),        ('Steven', 'Spielberg', 'USA'),        ('Quentin', 'Tarantino', 'USA'),        ('Martin', 'Scorsese', 'USA'),        ('David', 'Fincher', 'USA'),        ('Ridley', 'Scott', 'England'),        ('Stanley', 'Kubrick', 'USA'),        ('Clint', 'Eastwood', 'USA'),        ('James', 'Cameron', 'Canada'),        ('Tim', 'Burton', 'USA');","Напишите запрос, который извлекает из предложенной базы данных имена и фамилии всех режиссеров. При этом в результирующей таблице все символы в имени каждого режиссера должны быть заменены звездочками (*).",10,3,"select repeat('*', char_length(name)) as name, surname from Directors order by name desc, surname","SELECT     LPAD('', CHAR_LENGTH(name), '*') AS name,     surname FROM Directors ORDER BY CHAR_LENGTH(name) DESC, 2;",
4.1. Текстовые функции,"DROP TABLE IF EXISTS Directors; CREATE TABLE Directors (     id      INT PRIMARY KEY AUTO_INCREMENT,     name    VARCHAR(40),     surname VARCHAR(40),     country VARCHAR(40) );  INSERT INTO Directors (name, surname, country) VALUES ('Christopher', 'Nolan', 'England'),        ('Steven', 'Spielberg', 'USA'),        ('Quentin', 'Tarantino', 'USA'),        ('Martin', 'Scorsese', 'USA'),        ('David', 'Fincher', 'USA'),        ('Ridley', 'Scott', 'England'),        ('Stanley', 'Kubrick', 'USA'),        ('Clint', 'Eastwood', 'USA'),        ('James', 'Cameron', 'Canada'),        ('Tim', 'Burton', 'USA');","Напишите запрос, который извлекает из предложенной базы данных следующую информацию обо всех режиссерах: имя, фамилия, рейтинг.  При этом в результирующей таблице рейтинг каждого режиссера должен быть записан в следующем формате:  <рейтинг>% Более того, рейтинги, представленные однозначными числами, должны быть предварены двумя незначащими нулями, а рейтинги, представленные двухзначными числами, — одним незначащим нулем.",5,1,"select name, surname, lpad( concat(rating, '%'), 4, '0') as rating from Directors order by rating","SELECT name, surname, CONCAT(LPAD(rating, 3, 0), '%') AS rating FROM Directors ORDER BY rating ",
4.1. Текстовые функции,"DROP TABLE IF EXISTS Palindromes; CREATE TABLE Palindromes (     id      INT PRIMARY KEY AUTO_INCREMENT,     english VARCHAR(40),     russian VARCHAR(40) );  INSERT INTO Palindromes(english, russian) VALUES ('hut', 'шалаш'),        ('rotor', 'ротор'),        ('tenet', 'принцип'),        ('radar', 'радар'),        ('flood', 'потоп'),        ('level', 'уровень'),        ('madam', 'мадам'),        ('deed', 'поступок'),        ('it', 'оно'),        ('kayak', 'каяк'); ","Напишите запрос, извлекающий из предложенной базы данных слова (в обоих вариантах написания), которые являются палиндромами на английском и русском языках одновременно.",5,1,"select english, russian from Palindromes where reverse(english) = english and reverse(russian) = russian order by english",,
4.1. Текстовые функции,"DROP TABLE IF EXISTS Palindromes; CREATE TABLE Palindromes ( id INT PRIMARY KEY AUTO_INCREMENT, english VARCHAR(40), russian VARCHAR(40) ); INSERT INTO Palindromes(english, russian) VALUES ('hut', 'шалаш'), ('rotor', 'ротор'), ('tenet', 'принцип'), ('radar', 'радар'), ('flood', 'потоп'), ('level', 'уровень'), ('madam', 'мадам'), ('deed', 'поступок'), ('it', 'оно'), ('kayak', 'каяк');","Напишите запрос, извлекающий из предложенной базы данных слова (в английском варианте написания), которые являются палиндромами только на английском языке. При этом в результирующей таблице каждое слово должно быть повторено столько раз, сколько в нем содержится символов.",5,1,"select repeat(english, char_length(english)) as english from Palindromes where reverse(english) = english and reverse(russian) != russian group by english",,
4.2. Текстовые функции,"DROP TABLE IF EXISTS Clients; CREATE TABLE Clients (     id          INT PRIMARY KEY AUTO_INCREMENT,     name        VARCHAR(40),     surname     VARCHAR(40),     card_number VARCHAR(40) );  INSERT INTO Clients (name, surname, card_number) VALUES ('Christopher', 'Nolan', '3409-4719-9958-3769'),        ('Steven', 'Spielberg', '3757-1304-6041-2423'),        ('Quentin', 'Tarantino', '3456-7725-6011-8486'),        ('Martin', 'Scorsese', '3717-9339-7641-9962'),        ('David', 'Fincher', '3789-9065-8560-1250'),        ('Ridley', 'Scott', '3711-7949-7232-0127'),        ('Stanley', 'Kubrick', '3736-9259-2982-7717'),        ('Clint', 'Eastwood', '3484-1457-1207-8953'),        ('James', 'Cameron', '3430-5919-7308-6348'),        ('Tim', 'Burton', '3781-9214-6430-8051');","Напишите запрос, извлекающий из предложенной базы данных информацию о клиентах банка (имя, фамилия, номер банковской карты), фамилии которых начинаются на букву S. При этом в результирующей таблице номер банковской карты каждого клиента должен быть записан без дефисов.",10,2,"select name, surname, replace(card_number, '-', '') card_number from Clients where left(surname, 1) = 's' order by surname","SELECT name, surname, REPLACE(card_number, '-', '') AS card_number  FROM Clients WHERE LOCATE('s', surname) = 1 ORDER BY 2;",
4.2. Текстовые функции,"DROP TABLE IF EXISTS Clients; CREATE TABLE Clients (     id          INT PRIMARY KEY AUTO_INCREMENT,     name        VARCHAR(40),     surname     VARCHAR(40),     card_number VARCHAR(40) );  INSERT INTO Clients (name, surname, card_number) VALUES ('Christopher', 'Nolan', '3409-4719-9958-3769'),        ('Steven', 'Spielberg', '3757-1304-6041-2423'),        ('Quentin', 'Tarantino', '3456-7725-6011-8486'),        ('Martin', 'Scorsese', '3717-9339-7641-9962'),        ('David', 'Fincher', '3789-9065-8560-1250'),        ('Ridley', 'Scott', '3711-7949-7232-0127'),        ('Stanley', 'Kubrick', '3736-9259-2982-7717'),        ('Clint', 'Eastwood', '3484-1457-1207-8953'),        ('James', 'Cameron', '3430-5919-7308-6348'),        ('Tim', 'Burton', '3781-9214-6430-8051'); ","Напишите запрос, который извлекает из предложенной базы данных следующую информацию о первых пяти клиентах банка: идентификатор, имя, фамилия, номер банковской карты. При этом в результирующей таблице номер банковской карты каждого клиента должен быть записан без дефисов, а первые 12 цифр номера должны быть заменены звездочками (*).",15,3,"select id, name, surname, lpad(right(replace(card_number, '-', ''),4), 16, '*') as card_number from Clients limit 5","SELECT id, name, surname,        CONCAT(REPEAT('*', 12), RIGHT(card_number, 4)) AS card_number FROM Clients LIMIT 5",
4.2. Текстовые функции,"DROP TABLE IF EXISTS Directors; CREATE TABLE Directors (     id      INT PRIMARY KEY AUTO_INCREMENT,     name    VARCHAR(40),     surname VARCHAR(40),     email   VARCHAR(40) );  INSERT INTO Directors (name, surname, email) VALUES ('Christopher', 'Nolan', 'chris@gmail.com'),        ('Steven', 'Spielberg', 'sspil@outlook.com'),        ('Quentin', 'Tarantino', 'queen@gmail.com'),        ('Martin', 'Scorsese', 'martins@outlook.com'),        ('David', 'Fincher', 'dfincher@outlook.com'),        ('Ridley', 'Scott', 'riddler@gmail.com'),        ('Stanley', 'Kubrick', 'bigstan@icloud.com'),        ('Clint', 'Eastwood', 'cowboy@yahoo.com'),        ('James', 'Cameron', 'jamesava@yahoo.com'),        ('Tim', 'Burton', 'timmy@icloud.com'); ","Напишите запрос, который извлекает из предложенной базы данных имена и фамилии всех режиссеров.  При этом в результирующей таблице имя и фамилия каждого режиссера должны быть указаны в одном поле c псевдонимом director в следующем формате:  <первая буква в имени режиссера>. <фамилия режиссера>",10,2,"select concat(rpad(name, 1, ''), '. ', surname) as director from Directors order by rpad(name, 1, ''), surname",,
4.2. Текстовые функции,"DROP TABLE IF EXISTS Directors; CREATE TABLE Directors (     id      INT PRIMARY KEY AUTO_INCREMENT,     name    VARCHAR(40),     surname VARCHAR(40),     email   VARCHAR(40) );  INSERT INTO Directors (name, surname, email) VALUES ('Christopher', 'Nolan', 'chris@gmail.com'),        ('Steven', 'Spielberg', 'sspil@outlook.com'),        ('Quentin', 'Tarantino', 'queen@gmail.com'),        ('Martin', 'Scorsese', 'martins@outlook.com'),        ('David', 'Fincher', 'dfincher@outlook.com'),        ('Ridley', 'Scott', 'riddler@gmail.com'),        ('Stanley', 'Kubrick', 'bigstan@icloud.com'),        ('Clint', 'Eastwood', 'cowboy@yahoo.com'),        ('James', 'Cameron', 'jamesava@yahoo.com'),        ('Tim', 'Burton', 'timmy@icloud.com'); ","Напишите запрос, который извлекает из предложенной базы данных имена и фамилии всех режиссеров. При этом в результирующей таблице все буквы, кроме первой, в имени и фамилии каждого режиссера должны быть заменены звездочками (*).",15,3,"select rpad(left(name, 1), char_length(name), '*') as name,        rpad(left(surname, 1), char_length(surname), '*') as surname from Directors order by left(name, 1), left(surname, 1)","SELECT       CONCAT(lEFT(name, 1), REPEAT('*', CHAR_LENGTH(name) - 1)) AS name,       CONCAT(lEFT(surname, 1), REPEAT('*', CHAR_LENGTH(surname) - 1)) AS surname FROM Directors ORDER BY LEFT(name, 1), surname;",
4.2. Текстовые функции,"DROP TABLE IF EXISTS Directors; CREATE TABLE Directors (     id      INT PRIMARY KEY AUTO_INCREMENT,     name    VARCHAR(40),     surname VARCHAR(40),     email   VARCHAR(40) );  INSERT INTO Directors (name, surname, email) VALUES ('Christopher', 'Nolan', 'chris@gmail.com'),        ('Steven', 'Spielberg', 'sspil@outlook.com'),        ('Quentin', 'Tarantino', 'queen@gmail.com'),        ('Martin', 'Scorsese', 'martins@outlook.com'),        ('David', 'Fincher', 'dfincher@outlook.com'),        ('Ridley', 'Scott', 'riddler@gmail.com'),        ('Stanley', 'Kubrick', 'bigstan@icloud.com'),        ('Clint', 'Eastwood', 'cowboy@yahoo.com'),        ('James', 'Cameron', 'jamesava@yahoo.com'),        ('Tim', 'Burton', 'timmy@icloud.com'); ","Напишите запрос, который извлекает из предложенной базы данных следующую информацию обо всех режиссерах: идентификатор, имя, фамилия, локальная часть адреса электронной почты.",10,3,"select id, name, surname, left(email, locate('@', email)-1) as local_part from Directors order by id desc","SELECT id, name, surname, SUBSTRING_INDEX(email, '@', 1) local_part FROM Directors ORDER BY id DESC;",
4.3. Текстовые функции,"DROP TABLE IF EXISTS Directors; CREATE TABLE Directors (     id      INT PRIMARY KEY AUTO_INCREMENT,     name    VARCHAR(40),     surname VARCHAR(40),     email   VARCHAR(40) );  INSERT INTO Directors (name, surname, email) VALUES ('Christopher', 'Nolan', 'chris@gmail.com'),        ('Steven', 'Spielberg', 'sspil@outlook.com'),        ('Quentin', 'Tarantino', 'queen@gmail.com'),        ('Martin', 'Scorsese', 'martins@outlook.com'),        ('David', 'Fincher', 'dfincher@outlook.com'),        ('Ridley', 'Scott', 'riddler@gmail.com'),        ('Stanley', 'Kubrick', 'bigstan@icloud.com'),        ('Clint', 'Eastwood', 'cowboy@yahoo.com'),        ('James', 'Cameron', 'jamesava@yahoo.com'),        ('Tim', 'Burton', 'timmy@icloud.com'); ","Напишите запрос, извлекающий из предложенной базы данных имена и фамилии режиссеров, имя или фамилия которых записаны в нижнем регистре. При этом в результирующей таблице имя и фамилия каждого режиссера должны быть записаны с заглавной буквы.",25,4,"select concat(upper(substring(name, 1, 1)), '', substring(name, - char_length(name) + 1, char_length(name)-1)) as name, concat(upper(substring(surname, 1, 1)), '', substring(surname, - char_length(surname) + 1, char_length(surname)-1)) as surname    from Directors where binary name = lower(name) or binary surname = lower(surname) order by name","SELECT CONCAT(UPPER(LEFT(name, 1)), SUBSTRING(name, 2)) AS name,        CONCAT(UPPER(LEFT(surname, 1)), SUBSTRING(surname, 2)) AS surname FROM Directors WHERE BINARY LOWER(name) = name       OR BINARY LOWER(surname) = surname ORDER BY name",
4.3. Текстовые функции,"DROP TABLE IF EXISTS Directors; CREATE TABLE Directors (     id      INT PRIMARY KEY AUTO_INCREMENT,     name    VARCHAR(40),     surname VARCHAR(40),     email   VARCHAR(40) );  INSERT INTO Directors (name, surname, email) VALUES ('Christopher', 'Nolan', 'chris@gmail.com'),        ('Steven', 'Spielberg', 'sspil@outlook.com'),        ('Quentin', 'Tarantino', 'queen@gmail.com'),        ('Martin', 'Scorsese', 'martins@outlook.com'),        ('David', 'Fincher', 'dfincher@outlook.com'),        ('Ridley', 'Scott', 'riddler@gmail.com'),        ('Stanley', 'Kubrick', 'bigstan@icloud.com'),        ('Clint', 'Eastwood', 'cowboy@yahoo.com'),        ('James', 'Cameron', 'jamesava@yahoo.com'),        ('Tim', 'Burton', 'timmy@icloud.com'); ","Напишите запрос, который извлекает из предложенной базы данных следующую информацию обо всех режиссерах: имя, фамилия, локальная часть адреса электронной почты, доменная часть адреса электронной почты.",10,2,"select name, surname, substring_index(email, '@', 1) as local_part,                       substring_index(email, '@', -1) as domain from Directors order by name","SELECT name, surname, LEFT(email, LOCATE('@', email) - 1) AS local_part, RIGHT(email, CHAR_LENGTH(email) - LOCATE('@', email)) AS domain FROM Directors ORDER BY name;",
4.3. Текстовые функции,"DROP TABLE IF EXISTS Directors; CREATE TABLE Directors (     id      INT PRIMARY KEY AUTO_INCREMENT,     name    VARCHAR(40),     surname VARCHAR(40),     email   VARCHAR(40) );  INSERT INTO Directors (name, surname, email) VALUES ('Christopher', 'Nolan', 'chris@gmail.com'),        ('Steven', 'Spielberg', 'sspil@outlook.com'),        ('Quentin', 'Tarantino', 'queen@gmail.com'),        ('Martin', 'Scorsese', 'martins@outlook.com'),        ('David', 'Fincher', 'dfincher@outlook.com'),        ('Ridley', 'Scott', 'riddler@gmail.com'),        ('Stanley', 'Kubrick', 'bigstan@icloud.com'),        ('Clint', 'Eastwood', 'cowboy@yahoo.com'),        ('James', 'Cameron', 'jamesava@yahoo.com'),        ('Tim', 'Burton', 'timmy@icloud.com'); ","Напишите запрос, извлекающий из предложенной базы данных информацию о режиссерах (имя, фамилия, адрес электронной почты), в адресах электронной почты которых доменная часть равна outlook.com. При этом в результирующей таблице доменная часть в адресе электронной почты каждого режиссера должна быть заменена на pygen.ru.",10,2,"select name, surname, concat(substring_index(email, '@', 1), '@', 'pygen.ru') as email from Directors where email like '%outlook.com' order by email","SELECT name, surname, REPLACE(email, 'outlook.com', 'pygen.ru') as email FROM Directors WHERE SUBSTRING_INDEX(email, '@', -1) = 'outlook.com' ORDER BY email;",
4.3. Текстовые функции,"DROP TABLE IF EXISTS Directors; CREATE TABLE Directors (     id      INT PRIMARY KEY AUTO_INCREMENT,     name    VARCHAR(40),     surname VARCHAR(40),     email   VARCHAR(40) );  INSERT INTO Directors (name, surname, email) VALUES ('Christopher', 'Nolan', 'chris@gmail.com'),        ('Steven', 'Spielberg', 'sspil@outlook.com'),        ('Quentin', 'Tarantino', 'queen@gmail.com'),        ('Martin', 'Scorsese', 'martins@outlook.com'),        ('David', 'Fincher', 'dfincher@outlook.com'),        ('Ridley', 'Scott', 'riddler@gmail.com'),        ('Stanley', 'Kubrick', 'bigstan@icloud.com'),        ('Clint', 'Eastwood', 'cowboy@yahoo.com'),        ('James', 'Cameron', 'jamesava@yahoo.com'),        ('Tim', 'Burton', 'timmy@icloud.com'); ","Напишите запрос, который извлекает из предложенной базы данных следующую информацию обо всех режиссерах: имя, фамилия, адрес электронной почты. При этом в результирующей таблице все символы в локальной части адреса электронной почты каждого режиссера должны быть заменены звездочками (*).",20,4,"select name, surname, concat(repeat('*',char_length(substring_index(email, '@', 1))), '@', substring_index(email, '@', -1)) as email from Directors order by Directors.email ","SELECT name, surname,         LPAD(SUBSTRING(email, LOCATE('@', email)), CHAR_LENGTH(email), '*') AS email FROM Directors ORDER BY SUBSTRING_INDEX(email, '@', 1)",
4.4. Числовые функции,"DROP TABLE IF EXISTS Films; CREATE TABLE Films (     id       INT PRIMARY KEY AUTO_INCREMENT,     title    VARCHAR(20),     director VARCHAR(20) );  INSERT INTO Films (title, director) VALUES ('Toy Story 2', 'John Lasseter'),        ('WALL-E', 'Andrew Stanton'),        ('Ratatouille', 'Brad Bird'),        ('Up', 'Pete Docter'),        ('Brave', 'Brenda Chapman'),        ('Monsters University', 'Dan Scanlon'),        ('Cars 2', 'John Lasseter'),        ('Finding Nemo', 'Andrew Stanton'),        ('Toy Story', 'John Lasseter'),        ('The Incredibles', 'Brad Bird');","Напишите запрос, который извлекает из предложенной базы данных названия пяти случайных фильмов.  ",5,1,select title from Films order by rand() limit 5,,
4.4. Числовые функции,"DROP TABLE IF EXISTS Sizes; CREATE TABLE Sizes (     id              INT PRIMARY KEY AUTO_INCREMENT,     nominal_size    INT,     limit_deviation DECIMAL(3, 2),     actual_size     DECIMAL(4, 2) );  INSERT INTO Sizes (nominal_size, limit_deviation, actual_size) VALUES (18, 0.3, 17.7),        (26, 0.2, 25.6),        (14, 0.4, 14.1),        (42, 0.9, 41),        (36, 0.3, 36),        (24, 0.1, 24.2),        (8, 0.2, 7.9),        (4.3, 0.2, 4.1),        (1, 0.5, 1.5),        (49, 1, 47);","Каждая деталь имеет номинальный размер и действительный. Номинальным размером называют размер, определенный инженером при проектировании детали. Действительным размером называют фактический размер детали, полученный после ее изготовления и измерения. Также для каждой детали определяют допустимую погрешность — величину, на которую действительный размер детали может отличаться от номинального. Завод считает деталь бракованной, если разница между ее действительным и номинальным размерами превышает допустимую погрешность.  Напишите запрос, который извлекает из предложенной базы данных следующую информацию о деталях: действительный размер, допустимая погрешность, разница между действительным и номинальным размерами. При этом в результирующую таблицу должны быть добавлены только те детали, которые не являются бракованными.",15,4,"select actual_size, limit_deviation, ABS(actual_size - nominal_size) as difference from Sizes where ABS(actual_size - nominal_size) <= limit_deviation order by actual_size",,
4.4. Числовые функции,"DROP TABLE IF EXISTS Points; CREATE TABLE Points (     x INT,     y INT );  INSERT INTO Points (x, y) VALUES (5, 7),        (21, 25),        (10, 19),        (19, 29),        (0, 0),        (4, 19),        (23, 1),        (22, 20),        (3, 15),        (6, 18);","Напишите запрос, который извлекает из предложенной базы данных координаты точек, а также определяет, насколько каждая точка удалена от начала координат. При этом в результирующую таблицу должны быть добавлены координаты только тех точек, которые удалены от начала координат на значение больше 20.  Поле с расстоянием от точки до начала координат должно иметь псевдоним distance. Значения в поле distance должны быть округлены до 2 знаков после запятой.",10,2,"select x, y, round(sqrt(pow(x, 2) + pow(y, 2)), 2) as distance from Points where round(sqrt(pow(x, 2) + pow(y, 2)), 2) > 20 order by distance desc","SELECT x, y, ROUND(SQRT(@dist), 2) As distance FROM Points WHERE (@dist := POW(x, 2) + POW(y, 2)) > 400 ORDER BY 3 DESC;",
4.4. Числовые функции,"DROP TABLE IF EXISTS Films; CREATE TABLE Films (     id           INT PRIMARY KEY AUTO_INCREMENT,     title        VARCHAR(20),     director     VARCHAR(20),     running_time INT );  INSERT INTO Films (title, director, running_time) VALUES ('Toy Story 2', 'John Lasseter', 69),        ('WALL-E', 'Andrew Stanton', 104),        ('Ratatouille', 'Brad Bird', 125),        ('Up', 'Pete Docter', 101),        ('Brave', 'Brenda Chapman', 102),        ('Monsters University', 'Dan Scanlon', 110),        ('Cars 2', 'John Lasseter', 120),        ('Finding Nemo', 'Andrew Stanton', 107),        ('Toy Story', 'John Lasseter', 61),        ('The Incredibles', 'Brad Bird', 126);","Напишите запрос, который извлекает из предложенной базы данных следующую информацию обо всех фильмах: название, имя и фамилия режиссера, продолжительность.  При этом в результирующей таблице продолжительность каждого фильма должна быть переведена в часы и минуты и указана в поле с псевдонимом timing в следующем формате:  <часы>:<минуты> Более того, значения часов и минут, представленные однозначными числами, должны быть предварены одним незначащим нулем.",20,4,"select title, director, concat(lpad(running_time div 60, 2, '0'), ':', lpad(running_time mod 60, 2, '0')) as timing from Films order by running_time desc","SELECT title,        director,        CONCAT_WS(            ':',            LPAD(running_time DIV 60, 2, 0),            LPAD(running_time MOD 60, 2, 0)        ) AS timing FROM Films ORDER BY running_time DESC",
4.4. Числовые функции,"DROP TABLE IF EXISTS Ranges; CREATE TABLE Ranges (     id INT PRIMARY KEY AUTO_INCREMENT,     a  INT,     b  INT );  INSERT INTO Ranges (a, b) VALUES (0, 180),        (-1, 1),        (-10, 10),        (-90, 90),        (10, 100);","Напишите запрос, который извлекает из предложенной базы данных границы всех диапазонов, а также для каждого диапазона определяет случайное целое число из этого диапазона (включая граничные значения).  При этом в результирующей таблице границы каждого диапазона должны быть указаны в одном поле с псевдонимом range в следующем формате:  [<левая граница>; <правая граница>]",40,7,"select concat('[', a, ';', b, ']') as 'range', round(a + rand() * (b - a)) as random_value from Ranges order by id",,
4.5. Числовые функции,"DROP TABLE IF EXISTS PrimeNumbers; CREATE TABLE PrimeNumbers (     num INT );  INSERT INTO PrimeNumbers (num) VALUES (2),        (3),        (5),        (7),        (11),        (13),        (17),        (19),        (23),        (29);","Напишите запрос, который извлекает из предложенной базы данных все простые числа, а также представляет каждое из них в двоичной, восьмеричной и шестнадцатеричной системах счисления.",10,1,"select num, conv(num, 10, 2) as bin,             conv(num, 10, 8) as oct,             conv(num, 10, 16) as hex from PrimeNumbers order by num desc",,
4.5. Числовые функции,"DROP TABLE IF EXISTS Angles; CREATE TABLE Angles (     angle INT PRIMARY KEY );  INSERT INTO Angles (angle) VALUES (0),        (30),        (45),        (60),        (90),        (120),        (135),        (150),        (180),        (210),        (225),        (240),        (270),        (300),        (315),        (330),        (360);","Напишите запрос, который извлекает из предложенной базы градусные меры всех углов, а также вычисляет синус и косинус каждого угла.",15,3,"select concat(angle, '°') as x,         round(sin(radians(angle)), 1) as 'sin(x)',        round(cos(radians(angle)), 1) as 'cos(x)' from Angles",,
4.5. Числовые функции,"DROP TABLE IF EXISTS Movies; CREATE TABLE Movies (     id          INT PRIMARY KEY AUTO_INCREMENT,     title       VARCHAR(40),     flickmetrix INT,     metacritic  INT,     imdb        INT,     letterboxd  INT,     kinopoisk   INT );  INSERT INTO Movies (title, flickmetrix, metacritic, imdb, letterboxd, kinopoisk) VALUES ('The Godfather', 95, 100, 92, 92, 87),        ('Parasite', 92, 96, 85, 92, 80),        ('Pulp Fiction', 90, 94, 89, 86, 87),        ('Spirited Away', 90, 96, 86, 90, 85),        ('Alien', 88, 89, 85, 86, 79),        ('The Dark Knight', 88, 84, 90, 89, 85),        ('Spider-Man: Across the Spider-Verse', 87, 86, 87, 90, 85),        ('No Country for Old Men', 87, 92, 82, 86, 72); "," Напишите запрос, который извлекает из предложенной базы данных названия всех фильмов, а также определяет среднюю оценку каждого фильма, при этом не учитывая самую высокую и самую низкую оценки.",20,3,"select title, round((flickmetrix + metacritic + imdb + letterboxd + kinopoisk - least(flickmetrix, metacritic, imdb, letterboxd, kinopoisk) - greatest(flickmetrix, metacritic, imdb, letterboxd, kinopoisk))/3, 2) as average_rating from Movies order by round((flickmetrix + metacritic + imdb + letterboxd + kinopoisk - least(flickmetrix, metacritic, imdb, letterboxd, kinopoisk) - greatest(flickmetrix, metacritic, imdb, letterboxd, kinopoisk))/3, 2) desc, title",,
4.6. Функции даты и времени.,"DROP TABLE IF EXISTS Staff; CREATE TABLE Staff (     id         INT AUTO_INCREMENT PRIMARY KEY,     name       VARCHAR(20),     surname    VARCHAR(20),     hire_year  YEAR,     hire_day   INT,     salary     INT );  INSERT INTO Staff (name, surname, hire_year, hire_day, salary) VALUES ('Larry', 'Page', 1998, 190, 100000),        ('Sergey', 'Brin', 2019, 319, 110000),        ('Sundar', 'Pichai', 2009, 313, 130000),        ('Ruth', 'Porat', 2005, 330, 90000),        ('Sundar', 'Nadella', 1995, 8, 125000),        ('Jeff', 'Bezos', 2003, 131, 85000),        ('Marissa', 'Mayer', 2007, 267, 95000),        ('Susan', 'Wojcicki', 1988, 124, 120000),        ('Eric', 'Schmidt', 1991, 321, 115000),        ('Sheryl', 'Sandberg', 2012, 201, 90000); ","Напишите запрос, который извлекает из предложенной базы данных следующую информацию обо всех сотрудниках компании: имя, фамилия, год приема на работу, порядковый номер дня приема на работу.  При этом в результирующей таблице имя и фамилия каждого сотрудника должны быть указаны в одном поле c псевдонимом staffer в следующем формате:  <имя> <фамилия> Год и порядковый номер дня приема на работу каждого сотрудника должны быть преобразованы в дату и указаны в одном поле c псевдонимом hire_date.",10,2,"select concat(name, ' ', surname) as staffer, makedate(hire_year, hire_day) as hire_date from Staff order by hire_date desc",,
4.6. Функции даты и времени.,"DROP TABLE IF EXISTS Staff; CREATE TABLE Staff (     id        INT AUTO_INCREMENT PRIMARY KEY,     name      VARCHAR(20),     surname   VARCHAR(20),     hire_date DATE,     salary    INT );  INSERT INTO Staff (name, surname, hire_date, salary) VALUES ('Larry', 'Page', '1998-07-09', 100000),        ('Sergey', 'Brin', '2019-11-15', 110000),        ('Sundar', 'Pichai', '2009-11-09', 130000),        ('Ruth', 'Porat', '2005-11-26', 90000),        ('Sundar', 'Nadella', '1995-01-08', 125000),        ('Jeff', 'Bezos', '2003-05-11', 85000),        ('Marissa', 'Mayer', '2007-09-24', 95000),        ('Susan', 'Wojcicki', '1988-05-03', 120000),        ('Eric', 'Schmidt', '1991-11-17', 115000),        ('Sheryl', 'Sandberg', '2012-07-19', 90000); ","Напишите запрос, который извлекает из предложенной базы данных следующую информацию обо всех сотрудниках компании: имя, фамилия, дата приема на работу.  При этом в результирующей таблице имя и фамилия каждого сотрудника должны быть указаны в одном поле c псевдонимом staffer в следующем формате:  <имя> <фамилия> Дата приема на работу каждого сотрудника должна быть увеличена на 1 год и 6 месяцев.",10,2,"select concat(name, ' ', surname) as staffer, hire_date + interval '1 6' year_month as hire_date from Staff order by hire_date desc",,
4.6. Функции даты и времени.,"DROP TABLE IF EXISTS Staff; CREATE TABLE Staff (     id        INT AUTO_INCREMENT PRIMARY KEY,     name      VARCHAR(20),     surname   VARCHAR(20),     hire_date DATE,     salary    INT );  INSERT INTO Staff (name, surname, hire_date, salary) VALUES ('Larry', 'Page', '1998-07-09', 100000),        ('Sergey', 'Brin', '2019-11-15', 110000),        ('Sundar', 'Pichai', '2009-11-09', 130000),        ('Ruth', 'Porat', '2005-11-26', 90000),        ('Sundar', 'Nadella', '1995-01-08', 125000),        ('Jeff', 'Bezos', '2003-05-11', 85000),        ('Marissa', 'Mayer', '2007-09-24', 95000),        ('Susan', 'Wojcicki', '1988-05-03', 120000),        ('Eric', 'Schmidt', '1991-11-17', 115000),        ('Sheryl', 'Sandberg', '2012-07-19', 90000); ","Согласно правилам компании Google, первую заработную плату сотрудники компании получают в последний день первого месяца работы. Например, сотрудник, который устроился на работу 2007-09-24, первую заработную плату получит 2007-09-30.  Напишите запрос, который извлекает из предложенной базы данных имена и фамилии всех сотрудников компании, а также для каждого сотрудника указывает дату получения им первой заработной платы.",10,2,"select concat(name, ' ', surname) as staffer, last_day(hire_date) as first_salary from Staff order by salary desc",,
4.6. Функции даты и времени.,"DROP TABLE IF EXISTS Staff; CREATE TABLE Staff (     id        INT AUTO_INCREMENT PRIMARY KEY,     name      VARCHAR(20),     surname   VARCHAR(20),     hire_date DATE,     salary    INT );  INSERT INTO Staff (name, surname, hire_date, salary) VALUES ('Larry', 'Page', '1998-07-09', 100000),        ('Sergey', 'Brin', '2019-11-16', 110000),        ('Sundar', 'Pichai', '2009-11-09', 130000),        ('Ruth', 'Porat', '2005-11-26', 90000),        ('Sundar', 'Nadella', '1995-01-08', 125000),        ('Jeff', 'Bezos', '2003-05-11', 85000),        ('Marissa', 'Mayer', '2007-09-24', 95000),        ('Susan', 'Wojcicki', '1988-05-03', 120000),        ('Eric', 'Schmidt', '1991-11-17', 115000),        ('Sheryl', 'Sandberg', '2012-07-19', 90000); ","Согласно правилам компании Google, первую заработную плату сотрудники компании получают в последний день первого месяца работы. Например, сотрудник, который устроился на работу 2007-09-24, первую заработную плату получит 2007-09-30.  Напишите запрос, извлекающий из предложенной базы данных имена и фамилии сотрудников, которые на момент получения своей первой заработной платы проработали в компании меньше 15 дней.",15,3,"select concat(name, ' ', surname) as staffer from Staff where (to_days(last_day(hire_date)) - to_days(hire_date) + 1) < 15  order by staffer","SELECT CONCAT_WS(' ', name, surname) AS staffer FROM Staff WHERE LAST_DAY(hire_date) - INTERVAL 14 DAY < hire_date ORDER BY staffer",
4.6. Функции даты и времени.,"DROP TABLE IF EXISTS Staff; CREATE TABLE Staff (     id        INT AUTO_INCREMENT PRIMARY KEY,     name      VARCHAR(20),     surname   VARCHAR(20),     hire_date DATE,     salary    INT );  INSERT INTO Staff (name, surname, hire_date, salary) VALUES ('Larry', 'Page', '1998-09-04', 100000),        ('Sergey', 'Brin', '1998-09-04', 110000),        ('Sundar', 'Pichai', '2009-11-09', 130000),        ('Ruth', 'Porat', '2005-11-26', 90000),        ('Sundar', 'Nadella', '1998-11-24', 125000),        ('Jeff', 'Bezos', '1998-11-22', 85000),        ('Marissa', 'Mayer', '2007-09-24', 95000),        ('Susan', 'Wojcicki', '1998-11-23', 120000),        ('Eric', 'Schmidt', '2019-11-15', 115000),        ('Sheryl', 'Sandberg', '2012-07-19', 90000); ","Напишите запрос, извлекающий из предложенной базы данных имена и фамилии сотрудников, которые на 2023-07-15 проработали в компании больше 9000 дней.",10,3,"select concat(name, ' ', surname) as staffer from Staff where (to_days('2023-07-15') - to_days(hire_date)) > 9000 order by hire_date","SELECT CONCAT(name, ' ', surname) AS staffer FROM Staff WHERE ('2023-07-15' - INTERVAL 9000 DAY) > hire_date ORDER BY hire_date",
4.7. Функции даты и времени.,"DROP TABLE IF EXISTS Actors; CREATE TABLE Actors (     id         INT AUTO_INCREMENT PRIMARY KEY,     actor      VARCHAR(50),     birth_date DATETIME );  INSERT INTO Actors (actor, birth_date) VALUES ('Johnny Depp', '1963-06-09 19:10:00'),        ('Natalie Portman', '1981-06-09 06:15:00'),        ('Scarlett Johansson', '1984-11-22 18:30:00'),        ('Angelina Jolie', '1975-06-04 05:55:00'),        ('Brad Pitt', '1963-12-18 10:10:00'),        ('Meryl Streep', '1949-06-22 08:05:00'),        ('Leonardo DiCaprio', '1974-11-11 02:47:00'),        ('Tom Hanks', '1956-07-09 15:20:00'),        ('Jennifer Aniston', '1969-02-11 14:25:00'),        ('Denzel Washington', '1954-12-28 01:40:00'); ","Напишите запрос, который извлекает из предложенной базы данных всю информацию о каждом актере, а также разбивает все составные данные (имя и фамилия, дата и время рождения) по отдельным полям.",10,1,"select id, left(actor, locate(' ', actor) - 1) as name, substring_index(actor, ' ', -1) as surname, date(birth_date) as 'birth_date', time(birth_date) as birth_time from Actors","SELECT id,        SUBSTRING_INDEX(actor, ' ', 1)  AS name,        SUBSTRING_INDEX(actor, ' ', -1) AS surname,        DATE(birth_date)                AS birth_date,        TIME(birth_date)                AS birth_time FROM Actors",
4.7. Функции даты и времени.,"DROP TABLE IF EXISTS Actors; CREATE TABLE Actors (     id         INT AUTO_INCREMENT PRIMARY KEY,     name       VARCHAR(20),     surname    VARCHAR(20),     birth_date DATE,     birth_time TIME );  INSERT INTO Actors (name, surname, birth_date, birth_time) VALUES   ('Johnny', 'Depp', '1963-06-09', '19:10:00'),   ('Natalie', 'Portman', '1981-06-09', '18:00:00'),   ('Scarlett', 'Johansson', '1984-11-22', '18:30:00'),   ('Angelina', 'Jolie', '1975-06-04', '05:55:00'),   ('Brad', 'Pitt', '1963-12-18', '10:00:00'),   ('Meryl', 'Streep', '1949-06-22', '08:05:00'),   ('Leonardo', 'DiCaprio', '1974-11-11', '09:55:00'),   ('Tom', 'Hanks', '1956-07-09', '15:20:00'),   ('Jennifer', 'Aniston', '1969-02-11', '14:25:00'),   ('Denzel', 'Washington', '1954-12-28', '10:40:00'); ","Напишите запрос, извлекающий из предложенной базы данных информацию об актерах (имя, фамилия, время рождения), которые родились в 8, 10 или 18 часов.",10,1,"select name, surname, birth_time from Actors where hour(birth_time) = 8 or hour(birth_time) = 10 or hour(birth_time) = 18 order by birth_time","SELECT name, surname, birth_time FROM Actors WHERE HOUR(birth_time) IN (8, 10, 18) ORDER BY birth_time",
4.7. Функции даты и времени.,"DROP TABLE IF EXISTS Actors; CREATE TABLE Actors (     id         INT AUTO_INCREMENT PRIMARY KEY,     name       VARCHAR(20),     surname    VARCHAR(20),     birth_date DATE,     birth_time TIME );  INSERT INTO Actors (name, surname, birth_date, birth_time) VALUES ('Paul', 'Walker', '1973-09-12', '19:10:00'),        ('Emma', 'Wiklund', '1968-09-13', '06:15:00'),        ('Scarlett', 'Johansson', '1984-11-22', '18:30:00'),        ('Angelina', 'Jolie', '1975-06-04', '05:55:00'),        ('Trevor', 'Duke-Moretz', '1986-09-13', '10:10:00'),        ('Meryl', 'Streep', '1949-06-22', '08:05:00'),        ('Tyler', 'Hoechlin', '1987-09-11', '02:47:00'),        ('Tom', 'Hanks', '1956-07-09', '15:20:00'),        ('Jennifer', 'Aniston', '1969-02-11', '14:25:00'),        ('Andrew', 'Lincoln', '1973-09-14', '01:40:00'); ","Напишите запрос, извлекающий из предложенной базы данных информацию об актерах (имя, фамилия, дата рождения), которые родились раньше Дня программиста.",5,1,"select name, surname, birth_date from Actors where dayofyear(birth_date) < 256 order by birth_date",,
4.7. Функции даты и времени.,"DROP TABLE IF EXISTS Actors; CREATE TABLE Actors (     id         INT AUTO_INCREMENT PRIMARY KEY,     name       VARCHAR(20),     surname    VARCHAR(20),     birth_date DATE,     birth_time TIME );  INSERT INTO Actors (name, surname, birth_date, birth_time) VALUES ('Johnny', 'Depp', '1963-06-09', '19:10:00'),        ('Natalie', 'Portman', '1981-06-09', '06:15:00'),        ('Scarlett', 'Johansson', '1984-11-22', '18:30:00'),        ('Angelina', 'Jolie', '1975-06-04', '05:55:00'),        ('Brad', 'Pitt', '1963-12-18', '10:10:00'),        ('Meryl', 'Streep', '1949-06-22', '08:05:00'),        ('Leonardo', 'DiCaprio', '1974-11-11', '02:47:00'),        ('Tom', 'Hanks', '1956-07-09', '15:20:00'),        ('Jennifer', 'Aniston', '1969-02-11', '14:25:00'),        ('Denzel', 'Washington', '1954-12-28', '01:40:00'); ","Напишите запрос, извлекающий из предложенной базы данных информацию об актерах (имя, фамилия, дата рождения), которые родились в среду.",5,1,"select name, surname, birth_date from Actors where weekday(birth_date) = 2 order by birth_date",,
4.7. Функции даты и времени.,"DROP TABLE IF EXISTS Actors; CREATE TABLE Actors (     id         INT AUTO_INCREMENT PRIMARY KEY,     name       VARCHAR(20),     surname    VARCHAR(20),     birth_date DATE,     birth_time TIME );  INSERT INTO Actors (name, surname, birth_date, birth_time) VALUES ('Kristen', 'Stewart', '1990-04-09', '02:47:00'),        ('Chris', 'Hemsworth', '1983-08-11', '08:05:00'),        ('Zac', 'Efron', '1974-10-18', '02:47:00'),        ('Tom', 'Hanks', '1956-07-09', '15:20:00'),        ('Jennifer', 'Aniston', '1969-02-11', '14:25:00'),        ('Natalie', 'Portman', '1981-06-09', '06:15:00'),        ('Scarlett', 'Johansson', '1984-11-22', '18:30:00'),        ('Angelina', 'Jolie', '1975-06-04', '05:55:00'),        ('Charlize', 'Theron', '1975-08-07', '19:10:00'),        ('Denzel', 'Washington', '1954-12-28', '01:40:00'),        ('Kate', 'Winslet', '1975-09-05', '10:10:00'),        ('Elizabeth', 'Olsen', '1989-02-16', '02:47:00'); ","Напишите запрос, извлекающий из предложенной базы данных информацию об актерах (имя, фамилия, дата рождения), которые родились позже 1975 года во 2 или 4 квартале.",10,3,"select name, surname, birth_date from Actors where year(birth_date) > 1975 and (quarter(birth_date) = 2  or quarter(birth_date) = 4) order by birth_time desc","SELECT name, surname, birth_date FROM Actors WHERE YEAR(birth_date) > 1975 AND QUARTER(birth_date) IN (2, 4) ORDER BY birth_time DESC",
4.7. Функции даты и времени.,"DROP TABLE IF EXISTS Actors; CREATE TABLE Actors (     id         INT AUTO_INCREMENT PRIMARY KEY,     name       VARCHAR(20),     surname    VARCHAR(20),     birth_date DATE,     birth_time TIME );  INSERT INTO Actors (name, surname, birth_date, birth_time) VALUES ('Robbie', 'Williams', '1974-02-13', '12:10:00'),        ('Tom', 'Cruise', '1990-10-11', '08:25:00'),        ('Christian', 'Bale', '1990-12-11', '15:40:00'),        ('Chris', 'Hemsworth', '1983-08-11', '22:00:00'),        ('Meryl', 'Streep', '1949-07-20', '14:30:00'),        ('Naomi', 'Campbell', '1970-05-22', '09:30:00'),        ('Cate', 'Blanchett', '1969-03-21', '13:45:00'),        ('Joaquin', 'Phoenix', '1990-05-14', '13:30:00'),        ('Johnny', 'Depp', '1963-06-09', '11:15:00'),        ('Brad', 'Pitt', '1963-07-18', '09:30:00'),        ('Leonardo', 'DiCaprio', '1974-11-11', '10:45:00'),        ('Will', 'Smith', '1968-09-25', '08:50:00'),        ('Penelope', 'Cruz', '1956-06-14', '12:00:00'),        ('Tom', 'Hanks', '1956-07-10', '12:00:00'),        ('Julianne', 'Moore', '1960-01-11', '14:20:00'),        ('Emma', 'Watson', '1990-04-15', '10:10:00');","Напишите запрос, извлекающий из предложенной базы данных информацию об актерах (имя, фамилия, дата рождения), которые родились с мая по июль включительно.  При этом в результирующей таблице дата рождения каждого актера должна быть записана в следующем формате:  <день месяца> <полное название месяца> <год>",10,2,"select name, surname, concat(day(birth_date), ' ', monthname(birth_date), ' ', year(birth_date)) as birth_date from Actors where month(birth_date) in(5, 6, 7)","SELECT name, surname,        CONCAT_WS(' ',                  DAY(birth_date),                  MONTHNAME(birth_date),                  YEAR(birth_date)                 ) AS birth_date FROM Actors WHERE MONTH(birth_date) BETWEEN 5 AND 7",
4.8. Функции даты и времени.,"DROP TABLE IF EXISTS Orders; CREATE TABLE Orders (    id                INT AUTO_INCREMENT PRIMARY KEY,    customer_name     VARCHAR(50),    order_time        DATETIME,    spent_on_delivery TIME );  INSERT INTO Orders (customer_name, order_time, spent_on_delivery) VALUES ('John', '2023-10-23 12:00:00', '01:35:00'),        ('Alice', '2023-10-23 14:30:00', '03:20:00'),        ('Bob', '2023-10-23 08:45:00', '04:50:00'),        ('Eve', '2023-10-24 15:30:00', '02:15:00'),        ('Charlie', '2023-10-24 09:00:00', '03:30:00'),        ('Grace', '2023-10-24 10:30:00', '05:45:00'),        ('Daniel', '2023-10-24 14:15:00', '04:10:00'),        ('Fiona', '2023-10-25 11:00:00', '02:55:00'),        ('George', '2023-10-25 09:30:00', '03:40:00'),        ('Helen', '2023-10-26 07:45:00', '04:20:00'),        ('Ivan', '2023-10-26 11:30:00', '03:25:00'),        ('Ahti', '2023-11-24 10:00:00', '01:15:00'),        ('Julia', '2023-10-27 12:00:00', '05:30:00'),        ('Kevin', '2023-10-30 10:15:00', '03:55:00'),        ('Linda', '2023-11-01 10:30:00', '05:10:00'),        ('Michael', '2023-11-01 12:45:00', '02:15:00'); "," Напишите запрос, извлекающий из предложенной базы данных информацию о заказе (имя заказчика, время доставки), который 24 октября 2023 года был доставлен позже всех.",10,2,"select customer_name, addtime(order_time, spent_on_delivery) as delivery_datetime from Orders where date(addtime(order_time, spent_on_delivery)) = '2023-10-24' order by delivery_datetime desc limit 1","SELECT customer_name, ADDTIME(order_time, spent_on_delivery) as delivery_datetime FROM Orders WHERE ADDTIME(order_time, spent_on_delivery) = (SELECT MAX(ADDTIME(order_time, spent_on_delivery)) FROM Orders WHERE DATE(order_time) = '2023-10-24');",
4.8. Функции даты и времени.,"DROP TABLE IF EXISTS Tasks; CREATE TABLE Tasks (    id         INT AUTO_INCREMENT PRIMARY KEY,    executor   VARCHAR(20),    task       VARCHAR(100),    task_start DATE,    task_end   DATE );  INSERT INTO Tasks (executor, task, task_start, task_end) VALUES ('Larry Page', 'Develop new search algorithm', '2023-10-23', '2023-10-25'),        ('Sergey Brin', 'Analyze user data', '2023-10-23', '2023-10-28'),        ('Sundar Pichai', 'Launch new product', '2023-10-24', '2023-11-03'),        ('Ruth Porat', 'Financial analysis', '2023-10-24', '2023-10-26'),        ('Eric Schmidt', 'Meet with investors', '2023-10-25', '2023-10-31'),        ('Susan Wojcicki', 'Content strategy', '2023-10-25', '2023-10-31'),        ('Hiroshi Lockheimer', 'Mobile platform development', '2023-10-26', '2023-11-03'),        ('Thomas Kurian', 'Cloud services expansion', '2023-10-26', '2023-10-28'),        ('Jeff Dean', 'Machine learning research', '2023-10-27', '2023-11-01'),        ('Aparna Chennapragada', 'User experience design', '2023-10-28', '2023-11-03'); ","Согласно статистике компании Google, на выполнение каждой задачи уходит минимум один день. В день начала выполнения задачи, а также в день окончания ее выполнения задача считается активной. Например, задача, выполнение которой началось 2023-11-15 и закончилось 2023-11-18, считается выполненной за 4 дня.  Напишите запрос, извлекающий из предложенной базы данных информацию о задаче (описание, имя и фамилия выполняющего, количество потраченных на выполнение дней), которая была выполнена за наибольшее количество дней.",10,2,"select task, executor, (timestampdiff(day, task_start, task_end) + 1) as days_spent from Tasks order by days_spent desc limit 1","SELECT task, executor,        DATEDIFF(task_end, task_start) + 1 AS days_spent FROM Tasks ORDER BY days_spent DESC LIMIT 1",
4.8. Функции даты и времени.,"DROP TABLE IF EXISTS Users; CREATE TABLE Users (     id                 INT AUTO_INCREMENT PRIMARY KEY,     username           VARCHAR(50),     subscription_start DATE,     subscription_end   DATE );  INSERT INTO Users (username, subscription_start, subscription_end) VALUES ('s1mple', '2023-10-23', '2023-11-24'),        ('NiKo', '2023-10-25', '2023-11-03'),        ('device', '2023-10-27', '2023-12-20'),        ('EliGE', '2023-10-29', '2023-11-30'),        ('ZywOo', '2023-11-01', '2024-11-01'),        ('Magisk', '2023-11-03', '2024-12-04'),        ('stewie2k', '2023-11-05', '2023-12-26'),        ('coldzera', '2023-11-10', '2023-11-18'),        ('dupreeh', '2023-10-19', '2023-12-10'),        ('olofmeister', '2023-09-11', '2023-12-12'),        ('scream', '2023-12-13', '2023-12-14'),        ('kennyS', '2023-11-15', '2023-12-16'),        ('f0rest', '2023-10-17', '2023-12-18'),        ('GuardiaN', '2023-12-19', '2024-01-02'),        ('freakazoid', '2023-11-21', '2023-12-22'); "," Напишите запрос, который извлекает из предложенной базы данных псевдонимы пользователей платформы, а также определяет, на сколько дней оформил подписку каждый пользователь. При этом в результирующую таблицу должны быть добавлены только те пользователи, которые оформили подписку минимум на 15 дней.",15,2,"select username, (timestampdiff(day, subscription_start, subscription_end) + 1) as days from Users where (timestampdiff(day, subscription_start, subscription_end) + 1) >= 15 order by days desc, username",,
4.8. Функции даты и времени.,"DROP TABLE IF EXISTS Tasks; CREATE TABLE Tasks (    id         INT AUTO_INCREMENT PRIMARY KEY,    executor   VARCHAR(20),    task       VARCHAR(100),    task_start DATETIME,    task_end   DATETIME );  INSERT INTO Tasks (executor, task, task_start, task_end) VALUES ('Larry Page', 'Develop new search algorithm', '2023-10-23 12:00:00', '2023-10-25 18:00:00'),        ('Sergey Brin', 'Analyze user data', '2023-10-23 12:00:00', '2023-10-28 18:00:00'),        ('Sundar Pichai', 'Launch new product', '2023-10-24 15:00:00', '2023-10-24 16:00:00'),        ('Ruth Porat', 'Financial analysis', '2023-10-24 14:30:00', '2023-10-26 20:00:00'),        ('Eric Schmidt', 'Meet with investors', '2023-10-24 15:00:00', '2023-10-24 15:05:00'),        ('Susan Wojcicki', 'Content strategy', '2023-10-25 07:0:00', '2023-10-25 17:15:00'),        ('Hiroshi Lockheimer', 'Mobile platform development', '2023-10-26', '2023-11-03'),        ('Thomas Kurian', 'Cloud services expansion', '2023-10-27 09:30:00', '2023-10-27 15:45:00'),        ('Jeff Dean', 'Machine learning research', '2023-10-30 10:15:00', '2023-10-30 16:45:00'),        ('Aparna Chennapragada', 'User experience design', '2023-10-29 12:00:00', '2023-11-04 18:00:00'); ","Напишите запрос, извлекающий из предложенной базы данных информацию о задаче (описание, имя и фамилия выполняющего, потраченное на выполнение время), которая была выполнена за наименьшее количество времени.",10,2,"select task, executor, timediff(task_end, task_start) as time_spent from Tasks order by time_spent limit 1",,
4.8. Функции даты и времени.,"DROP TABLE IF EXISTS Staff; CREATE TABLE Staff (   id          INT AUTO_INCREMENT PRIMARY KEY,   name        VARCHAR(20),   surname     VARCHAR(20),   work_start  TIME,   work_end    TIME,   break_start TIME,   break_end   TIME );  INSERT INTO Staff (name, surname, work_start, work_end, break_start, break_end) VALUES ('Sundar', 'Pichai', '7:00:00', '17:00:00', '12:00:00', '13:00:00'),        ('Sergey', 'Brin', '8:00:00', '16:30:00', '11:30:00', '12:30:00'),        ('Larry', 'Page', '6:30:00', '15:45:00', '12:15:00', '12:45:00'),        ('Ruth', 'Porat', '8:15:00', '17:15:00', '12:30:00', '13:30:00'),        ('Eric', 'Schmidt', '7:30:00', '17:45:00', '12:00:00', '13:00:00'),        ('Susan', 'Wojcicki', '8:30:00', '16:30:00', '12:45:00', '13:45:00'),        ('Hiroshi', 'Lockheimer', '7:45:00', '17:15:00', '12:15:00', '13:15:00'),        ('Thomas', 'Kurian', '7:00:00', '16:30:00', '12:30:00', '13:30:00'),        ('Jeff', 'Dean', '8:15:00', '17:00:00', '12:45:00', '13:45:00'),        ('Aparna', 'Chennapragada', '7:30:00', '17:15:00', '12:00:00', '13:00:00'); "," Напишите запрос, который извлекает из предложенной базы данных имена и фамилии всех сотрудников компании, а также определяет, сколько времени каждый сотрудник проводит за работой.",15,3,"select concat_ws(' ', name, surname) as staffer,  addtime(timediff(break_start, work_start), timediff(work_end, break_end)) as work_time from Staff order by work_time desc, staffer","SELECT CONCAT_WS(' ', name, surname) AS staffer,        SUBTIME(            TIMEDIFF(work_end, work_start),            TIMEDIFF(break_end, break_start)        ) AS work_time FROM Staff ORDER BY work_time DESC, staffer",
4.8. Функции даты и времени.,"DROP TABLE IF EXISTS Actors; CREATE TABLE Actors (     id         INT AUTO_INCREMENT PRIMARY KEY,     name       VARCHAR(20),     surname    VARCHAR(20),     birth_date DATE );  INSERT INTO Actors (name, surname, birth_date) VALUES ('Paul', 'Walker', '1973-09-12'),        ('Emma', 'Wiklund', '1968-09-13'),        ('Scarlett', 'Johansson', '1984-11-22'),        ('Angelina', 'Jolie', '1975-06-04'),        ('Trevor', 'Duke-Moretz', '1986-09-13'),        ('Meryl', 'Streep', '1949-06-22'),        ('Tyler', 'Hoechlin', '1987-09-11'),        ('Tom', 'Hanks', '1956-07-09'),        ('Jennifer', 'Aniston', '1969-02-11'),        ('Andrew', 'Lincoln', '1973-09-14'); ","Напишите запрос, который извлекает из предложенной базы данных имена и фамилии актеров, а также определяет текущий возраст каждого актера. При этом вычисление текущего возраста должно выполняться без учета каких-либо часовых поясов.  ",10,2,"select name, surname, timestampdiff(year, birth_date, curdate()) as age from Actors order by age desc","SELECT name, surname,        DATEDIFF(UTC_DATE(),birth_date) div 365 as age FROM Actors ORDER BY age DESC;",
4.8. Функции даты и времени.,"DROP TABLE IF EXISTS Actors; CREATE TABLE Actors (    id         INT AUTO_INCREMENT PRIMARY KEY,    name       VARCHAR(20),    surname    VARCHAR(20),    birth_date DATE );  INSERT INTO Actors (name, surname, birth_date) VALUES ('Paul', 'Walker', '1973-09-12'),        ('Emma', 'Wiklund', '1968-09-13'),        ('Scarlett', 'Johansson', '1984-11-22'),        ('Angelina', 'Jolie', '1975-06-04'),        ('Trevor', 'Duke-Moretz', '1986-09-13'),        ('Gwyneth', 'Paltrow', '1972-09-27'),        ('Meryl', 'Streep', '1949-06-22'),        ('Leonardo', 'DiCaprio', '1972-09-13'),        ('Tyler', 'Hoechlin', '1987-09-11'),        ('Tom', 'Hanks', '1956-07-09'),        ('Jennifer', 'Aniston', '1969-02-11'),        ('Andrew', 'Lincoln', '1973-09-14'); ","Напишите запрос, извлекающий из предложенной базы данных информацию об актерах (имя, фамилия, дата рождения), которым на 12 сентября 2023 года больше 50 полных лет.",10,2,"select name, surname, birth_date from Actors where timestampdiff(year, birth_date, '2022-09-15') > 50 order by birth_date desc","SELECT     name,     surname,     birth_date FROM     Actors WHERE     '2023-09-12' > ADDDATE(birth_date, INTERVAL 51 YEAR) ORDER BY     birth_date DESC;",
4.8. Функции даты и времени.,"DROP TABLE IF EXISTS Rental; CREATE TABLE Rental (    id         INT PRIMARY KEY,    name       VARCHAR(255),    car_brand  VARCHAR(255),    rent_start DATETIME,    rent_end   DATETIME );  INSERT INTO Rental (id, name, car_brand, rent_start, rent_end) VALUES (1, 'John', 'BMW', '2023-10-23 12:30:00', '2023-10-23 18:00:00'),        (2, 'Alice', 'Honda', '2023-10-23 10:00:00', '2023-10-23 14:30:00'),        (3, 'Bob', 'Audi', '2023-10-24 14:30:00', '2023-10-24 17:00:00'),        (4, 'Charlie', 'BMW', '2023-10-25 08:45:00', '2023-10-25 12:30:00'),        (5, 'Dave', 'Honda', '2023-10-26 15:30:00', '2023-10-26 20:15:00'),        (6, 'Emily', 'Audi', '2023-10-26 09:00:00', '2023-10-26 15:45:00'),        (7, 'Frank', 'Mercedes', '2023-10-27 11:15:00', '2023-11-27 17:00:00'),        (8, 'Grace', 'Honda', '2023-10-28 08:00:00', '2023-10-28 13:45:00'),        (9, 'Hank', 'Audi', '2023-10-28 13:30:00', '2023-10-28 18:45:00'),        (10, 'Irene', 'BMW', '2023-10-29 14:00:00', '2023-10-29 19:30:00'),        (11, 'Jack', 'Honda', '2023-10-30 07:45:00', '2023-10-30 12:15:00'),        (12, 'Kate', 'BMW', '2023-10-31 16:30:00', '2023-10-31 21:00:00'),        (13, 'Lucas', 'Audi', '2023-11-01 10:15:00', '2023-11-01 14:45:00'),        (14, 'Mary', 'Mercedes', '2023-11-02 13:00:00', '2023-11-02 17:30:00'),        (15, 'Nina', 'BMW', '2023-11-03 09:30:00', '2023-11-03 14:00:00'); ","Сервис Sixt предлагает в аренду автомобили различных марок по цене 10 евро в час, причем количество минут и секунд во время выставления счета за аренду не учитывается. Например, если автомобиль был арендован на время 05:50:10, за него будет выставлен счет в 50 евро.  Напишите запрос, который извлекает из предложенной базы данных имена арендаторов, а также определяет, на какое время каждый арендатор взял автомобиль в аренду и какую сумму он за это заплатил. При этом в результирующую таблицу должны быть добавлены только те арендаторы, которые взяли в аренду автомобиль марки BMW.",20,4,"select name, timediff(rent_end, rent_start) as rent_time, concat(timestampdiff(hour, rent_start, rent_end)*10, '€') as rent_amount from Rental where car_brand = 'BMW' order by rent_time, name","SELECT     name,     SUBTIME(         TIME(rent_end),          TIME(rent_start)     ) AS rent_time,     CONCAT(         HOUR(SUBTIME(             TIME(rent_end),              TIME(rent_start))) * 10,          '€'     ) AS rent_amount FROM     Rental WHERE     car_brand = 'BMW' ORDER BY     rent_time,     name",
4.9. Функции даты и времени.,"DROP TABLE IF EXISTS Actors; CREATE TABLE Actors (    id         INT AUTO_INCREMENT PRIMARY KEY,    name       VARCHAR(20),    surname    VARCHAR(20),    birth_date DATE,    birth_time TIME );  INSERT INTO Actors (name, surname, birth_date, birth_time) VALUES ('Paul', 'Walker', '1973-09-12', '19:10:00'),        ('Emma', 'Wiklund', '1968-09-13', '06:15:00'),        ('Scarlett', 'Johansson', '1984-11-22', '18:30:00'),        ('Angelina', 'Jolie', '1975-06-04', '05:55:00'),        ('Trevor', 'Duke-Moretz', '1986-09-13', '10:10:00'),        ('Meryl', 'Streep', '1949-06-22', '08:05:00'),        ('Tyler', 'Hoechlin', '1987-09-11', '02:47:00'),        ('Tom', 'Hanks', '1956-07-09', '15:20:00'),        ('Jennifer', 'Aniston', '1969-02-11', '14:25:00'),        ('Andrew', 'Lincoln', '1973-09-14', '01:40:00');","Напишите запрос, извлекающий из предложенной базы данных информацию об актерах (имя, фамилия, дата рождения, время рождения), которые родились в первые 14 дней месяца.  При этом в результирующей таблице дата рождения каждого актера должна быть записана в следующем формате:  <день месяца>.<номер месяца>.<год> Время рождения каждого актера должно быть записано в следующем формате:  <часы>:<минуты>",10,1,"select name, surname, date_format(birth_date, '%d.%m.%Y') as birth_date, date_format(birth_time, '%H:%i') as birth_time from Actors where day(birth_date) <= 14","SELECT name, surname,         DATE_FORMAT(birth_date, '%d.%m.%Y') AS birth_date,         TIME_FORMAT(birth_time, '%H:%i') AS birth_time FROM Actors WHERE DAY(birth_date) < 15",
4.9. Функции даты и времени.,"DROP TABLE IF EXISTS Actors; CREATE TABLE Actors (    id         INT AUTO_INCREMENT PRIMARY KEY,    name       VARCHAR(20),    surname    VARCHAR(20),    birth_date DATE,    birth_time TIME );  INSERT INTO Actors (name, surname, birth_date, birth_time) VALUES ('Paul', 'Walker', '1973-09-12', '19:10:00'),        ('Emma', 'Wiklund', '1968-09-13', '06:15:00'),        ('Scarlett', 'Johansson', '1984-11-22', '18:30:00'),        ('Angelina', 'Jolie', '1975-06-04', '05:55:00'),        ('Trevor', 'Duke-Moretz', '1986-09-13', '10:10:00'),        ('Meryl', 'Streep', '1949-06-22', '08:05:00'),        ('Tyler', 'Hoechlin', '1987-09-11', '02:47:00'),        ('Tom', 'Hanks', '1956-07-09', '15:20:00'),        ('Jennifer', 'Aniston', '1969-02-11', '14:25:00'),        ('Andrew', 'Lincoln', '1973-09-14', '01:40:00');","Напишите запрос, извлекающий из предложенной базы данных информацию об актерах (имя, фамилия, дата рождения, время рождения), которые родились с 1969 по 1975 год включительно.  При этом дата и время рождения каждого актера должны быть указаны в одном поле с псевдонимом birth_datetime в следующем формате:  <день месяца> <полное название месяца> <год>, <часы>:<минуты>",10,2,"select name, surname, date_format(timestamp(birth_date, birth_time), '%d %M %Y, %H:%i') as birth_datetime from Actors where year(birth_date) between 1969 and 1975","SELECT name, surname,         CONCAT_WS(            ', ',             DATE_FORMAT(birth_date, '%d %M %Y'),             TIME_FORMAT(birth_time, '%H:%i')        )         AS birth_datetime FROM Actors WHERE YEAR(birth_date) BETWEEN 1969 AND 1975",
4.9. Функции даты и времени.,"DROP TABLE IF EXISTS Actors; CREATE TABLE Actors (    id         INT AUTO_INCREMENT PRIMARY KEY,    name       VARCHAR(20),    surname    VARCHAR(20),    birth_date VARCHAR(20),    birth_time VARCHAR(30) );  INSERT INTO Actors (name, surname, birth_date, birth_time) VALUES ('Paul', 'Walker', '12 Sep 1973', 'Hours: 19, Minutes: 10'),        ('Emma', 'Wiklund', '13 Sep 1968', 'Hours: 6, Minutes: 15'),        ('Scarlett', 'Johansson', '22 Nov 1984', 'Hours: 18, Minutes: 30'),        ('Angelina', 'Jolie', '04 Jun 1975', 'Hours: 5, Minutes: 55'),        ('Trevor', 'Duke-Moretz', '13 Sep 1986', 'Hours: 10, Minutes: 10'),        ('Meryl', 'Streep', '22 Jun 1949', 'Hours: 8, Minutes: 5'),        ('Tyler', 'Hoechlin', '11 Sep 1987', 'Hours: 2, Minutes: 47'),        ('Tom', 'Hanks', '09 Jul 1956', 'Hours: 15, Minutes: 20'),        ('Jennifer', 'Aniston', '11 Feb 1969', 'Hours: 14, Minutes: 25'),        ('Andrew', 'Lincoln', '14 Sep 1973', 'Hours: 1, Minutes: 40'); ","Напишите запрос, извлекающий из предложенной базы данных информацию об актерах (имя, фамилия, дата рождения, время рождения), которые родились в сентябре. При этом дата и время рождения каждого актера должны быть записаны в формате ISO.",20,4,"select name, surname, str_to_date(birth_date, '%d %b %Y') as birth_date, str_to_date(birth_time, 'Hours: %H, Minutes: %i') as birth_time from Actors  where month(str_to_date(birth_date, '%d %b %Y')) = 09","SELECT name,         surname,        DATE_FORMAT(STR_TO_DATE(birth_date, '%d %b %Y'), GET_FORMAT(DATE, 'ISO')) as birth_date,        TIME_FORMAT(STR_TO_DATE(birth_time, 'Hours: %H, Minutes: %i'), GET_FORMAT(TIME, 'ISO')) as birth_time FROM Actors WHERE MONTH(STR_TO_DATE(birth_date, '%d %b %Y')) = 9",
4.10 Дополнительные функции ,"DROP TABLE IF EXISTS Directors; CREATE TABLE Directors (     id      INT PRIMARY KEY AUTO_INCREMENT,     name    VARCHAR(40),     surname VARCHAR(40),     country VARCHAR(40),     rating  INT );  INSERT INTO Directors (name, surname, country, rating) VALUES ('Christopher', 'Nolan', 'England', 90),        ('Steven', 'Spielberg', 'USA', 79),        ('Quentin', 'Tarantino', 'USA', 95),        ('Martin', 'Scorsese', 'USA', 68),        ('David', 'Fincher', 'USA', 100),        ('Ridley', 'Scott', 'England', 54),        ('Stanley', 'Kubrick', 'USA', 9),        ('Clint', 'Eastwood', 'USA', 74),        ('James', 'Cameron', 'Canada', 8),        ('Tim', 'Burton', 'USA', 41);","Напишите запрос, который извлекает из предложенной базы данных следующую информацию обо всех режиссерах: имя, фамилия, страна рождения. При этом если страной рождения режиссера является England, то в результирующей таблице она должна остаться без изменений, если какая-либо другая страна — заменена на строку Other country.",5,1,"select name, surname, if(country = 'England', 'England', 'Other country') as country from Directors order by name","SELECT name, surname,        IF(country = 'England', country, 'Other country') AS country FROM Directors ORDER BY name",
4.10 Дополнительные функции ,"DROP TABLE IF EXISTS Directors; CREATE TABLE Directors (     id      INT PRIMARY KEY AUTO_INCREMENT,     name    VARCHAR(40),     surname VARCHAR(40),     country VARCHAR(40),     rating  INT );  INSERT INTO Directors (name, surname, country, rating) VALUES ('Christopher', 'Nolan', 'England', 90),        ('Steven', 'Spielberg', 'USA', 79),        ('Quentin', 'Tarantino', 'USA', NULL),        ('Martin', 'Scorsese', 'USA', NULL),        ('David', 'Fincher', 'USA', 100),        ('Ridley', 'Scott', 'England', NULL),        ('Stanley', 'Kubrick', 'USA', 9),        ('Clint', 'Eastwood', 'USA', 74),        ('James', 'Cameron', 'Canada', 8),        ('Tim', 'Burton', 'USA', NULL);","Напишите запрос, который извлекает из предложенной базы данных следующую информацию обо всех режиссерах: имя, фамилия, рейтинг. При этом если рейтинг режиссера не определен, в результирующей таблице он должен быть заменен на значение 0. ",10,2,"select name, surname, ifnull(rating, '0') as rating from Directors order by Directors.rating, name","SELECT name, surname,        COALESCE(rating , 0) AS rating  FROM Directors ORDER BY rating, name ",
4.10 Дополнительные функции ,"DROP TABLE IF EXISTS Directors; CREATE TABLE Directors (     id      INT PRIMARY KEY AUTO_INCREMENT,     name    VARCHAR(40),     surname VARCHAR(40),     country VARCHAR(40),     rating  INT );  INSERT INTO Directors (name, surname, country, rating) VALUES (NULL, 'Nolan', 'England', 90),        ('Steven', 'Spielberg', 'USA', 79),        ('Quentin', NULL, 'USA', 95),        ('Martin', 'Scorsese', 'USA', 68),        (NULL, NULL, 'USA', 100),        ('Ridley', 'Scott', 'England', 54),        (NULL, NULL, 'USA', 9),        ('Clint', 'Eastwood', 'USA', 74),        (NULL, 'Cameron', 'Canada', 8),        ('Tim', 'Burton', 'USA', 41); ","Напишите запрос, который извлекает из предложенной базы данных имена и рейтинги всех режиссеров. При этом если имя режиссера не определено, то в результирующей таблице оно должно быть заменено на его фамилию. Однако если фамилия режиссера также не определена, то в качестве его имени должна быть использована строка Unknown.",15,3,"SELECT COALESCE(name, surname, 'Unknown') AS director,        rating        FROM Directors ORDER BY rating DESC","select ifnull(name, ifnull(surname, 'Unknown')) as director, rating from Directors  order by rating desc",
4.10 Дополнительные функции ,"DROP TABLE IF EXISTS Directors; CREATE TABLE Directors (     id      INT PRIMARY KEY AUTO_INCREMENT,     name    VARCHAR(40),     surname VARCHAR(40),     country VARCHAR(40),     rating  INT );  INSERT INTO Directors (name, surname, country, rating) VALUES ('Christopher', 'Nolan', 'England', 90),        ('Steven', 'Spielberg', 'USA', 79),        ('Quentin', 'Tarantino', 'USA', 95),        ('Martin', 'Scorsese', 'USA', 68),        ('David', 'Fincher', 'USA', 100),        ('Ridley', 'Scott', 'England', 54),        ('Stanley', 'Kubrick', 'USA', 9),        ('Clint', 'Eastwood', 'USA', 74),        ('James', 'Cameron', 'Canada', 8),        ('Tim', 'Burton', 'USA', 41); ","При этом если страной рождения режиссера является USA, то в результирующей таблице его рейтинг должен быть увеличен на 10, если какая-либо другая страна — остаться без изменений. Более того, увеличенный рейтинг не должен быть больше 100. Например, если рейтинг режиссера равен 96, то после увеличения на 10 он должен стать равным 100.",30,5,"select name, surname, country, if(if(country = 'USA', rating + 10, rating) > 100, 100, if(country = 'USA', rating + 10, rating)) as rating from Directors order by rating desc, name","SELECT name, surname, country,        IF(country = 'USA', IF(rating + 10 > 100, 100, rating + 10), rating) AS rating FROM Directors ORDER BY rating DESC, name",
4.11 Условные конструкции ,"DROP TABLE IF EXISTS Math; CREATE TABLE Math (     id      INT PRIMARY KEY AUTO_INCREMENT,     name    VARCHAR(20),     surname VARCHAR(20),     grade   VARCHAR(20) );  INSERT INTO Math (name, surname, grade) VALUES ('Flash', 'Thompson', 'D'),        ('Peter', 'Parker', 'A'),        ('Mary', 'Jane', 'D'),        ('Gwen', 'Stacy', 'B'),        ('Harry', 'Osborn', 'A'),        ('Ben', 'Reilly', 'E'),        ('Miles', 'Morales', 'A'),        ('John', 'Jameson', 'E'),        ('Curtis', 'Connors', 'B'),        ('Edward', 'Brock', 'C');","Напишите запрос, который извлекает из предложенной базы данных следующую информацию обо всех учениках: имя, фамилия, оценка за экзамен.  При этом в результирующей таблице оценка каждого ученика должна быть записана в виде ее числового эквивалента:  Буквенная оценка Числовая оценка A 5 B 4 C 3 D 2 E 1",15,1,"select name, surname,   case grade    when 'a' then 5    when 'b' then 4    when 'c' then 3    when 'd' then 2      when 'e' then 1   end as grade  from Math order by grade desc, name","SELECT   name,   surname,   LOCATE(grade, 'EDCBA') AS grade FROM   Math ORDER BY   grade DESC,   name ASC;",
4.11 Условные конструкции ,"DROP TABLE IF EXISTS Math; CREATE TABLE Math (     id      INT PRIMARY KEY AUTO_INCREMENT,     name    VARCHAR(20),     surname VARCHAR(20),     grade   VARCHAR(20) );  INSERT INTO Math (name, surname, grade) VALUES ('Flash', 'Thompson', 'D'),        ('Peter', 'Parker', 'A'),        ('Mary', 'Jane', 'D'),        ('Gwen', 'Stacy', 'B'),        ('Harry', 'Osborn', 'A'),        ('Ben', 'Reilly', 'E'),        ('Miles', 'Morales', 'A'),        ('John', 'Jameson', 'E'),        ('Curtis', 'Connors', 'B'),        ('Edward', 'Brock', 'C');","Напишите запрос, который извлекает из предложенной базы данных следующую информацию обо всех учениках: имя, фамилия, оценка за экзамен.  При этом в результирующей таблице оценка каждого ученика должна быть указана в поле с псевдонимом result в виде ее текстового эквивалента:  Оценка Описание A Great B Great C Well D Bad E Bad",15,2,"select name, surname,   case grade    when 'A' then 'Great'    when 'b' then 'Great'    when 'c' then 'Well'    else 'Bad'   end as result from Math order by grade, name","SELECT   name,   surname,   CASE     WHEN grade < 'C' THEN 'Great'     WHEN grade < 'D' THEN 'Well'     ELSE 'Bad'   END AS result FROM   Math ORDER BY    grade,   name;",
4.11 Условные конструкции ,"DROP TABLE IF EXISTS Math; CREATE TABLE Math (     id      INT PRIMARY KEY AUTO_INCREMENT,     name    VARCHAR(20),     surname VARCHAR(20),     grade   INT );  INSERT INTO Math (name, surname, grade) VALUES ('Flash', 'Thompson', 99),        ('Peter', 'Parker', 84),        ('Mary', 'Jane', 9),        ('Gwen', 'Stacy', 23),        ('Harry', 'Osborn', 39),        ('Ben', 'Reilly', 77),        ('Miles', 'Morales', 59),        ('John', 'Jameson', 0),        ('Curtis', 'Connors', 100),        ('Edward', 'Brock', 59); ","Таблица Math Напишите запрос, который извлекает из предложенной базы данных следующую информацию обо всех учениках: имя, фамилия, оценка за экзамен.  При этом в результирующей таблице оценка каждого ученика должна быть переведена из стобалльной шкалы в пятибалльную и записана в соответствующем виде:  Стобалльная шкала Пятибалльная шкала [80; 100] 5 [60; 79] 4 [30; 59] 3 [10; 29] 2 [0; 9] 1",20,3,"select name, surname,  case    when grade between 80 and 100 then 5   when grade between 60 and 79 then 4   when grade between 30 and 59 then 3   when grade between 10 and 29 then 2   else 1  end as grade from Math order by grade desc, name",,
4.11 Условные конструкции ,"DROP TABLE IF EXISTS Students; CREATE TABLE Students (     id      INT PRIMARY KEY AUTO_INCREMENT,     name    VARCHAR(20),     surname VARCHAR(20),     email   VARCHAR(40) );  INSERT INTO Students (name, surname, email) VALUES ('Flash', 'Thompson', '99power@midtown.com'),        ('Peter', 'Parker', 'FriendlyNeighborhood@midtown.com'),        ('Mary', 'Jane', 'redhead@gmail.com'),        ('Gwen', 'Stacy', '7@yahoo.com'),        ('Harry', 'Osborn', '1justharry@outlook.com'),        ('Ben', 'Reilly', 'R@midtown.com'),        ('Miles', 'Morales', 'yourspidey2@midtown.com'),        ('John', 'Jameson', 'boss@bugle.com'),        ('Curtis', 'Connors', '5@midtown.com'),        ('Edward', 'Brock', 'WeAreVenom@midtown.com'); ","Каждый ученик средней школы Мидтауна должен иметь корректный адрес электронной почты, однако не все учащиеся соблюдают данное правило. Адрес электронный почты считается корректным, если выполняется ряд следующих условий:  доменная часть адреса равна midtown.com локальная часть адреса состоит как минимум из двух символов первый символ в локальной части адреса не является цифрой Напишите запрос, который извлекает из этой предложенной базы данных имена и фамилии всех учеников школы, а также проверяет на корректность адреса их электронных почт.  Поле с информацией о корректности адреса электронной почты должно иметь псевдоним email_status и содержать строку Correct, если адрес электронной почты ученика является корректным, или Incorrect в противном случае.",20,4,"select name, surname,  case   when email like '%__@midtown.com' and left(email, 1) not between '0' and '9'  then 'Correct'   else 'Incorrect'  end as email_status from Students order by name","SELECT name, surname,        CASE            WHEN SUBSTRING_INDEX(email, '@', -1) != 'midtown.com' THEN 'Incorrect'            WHEN LOCATE('@', email) < 3 THEN 'Incorrect'            WHEN LEFT(email, 1) IN ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9') THEN 'Incorrect'            ELSE 'Correct'        END as email_status FROM Students ORDER BY name",
4.11 Условные конструкции ,"DROP TABLE IF EXISTS Clients; CREATE TABLE Clients (     id INT PRIMARY KEY AUTO_INCREMENT,     name VARCHAR(20),     surname VARCHAR(20),     status VARCHAR(40) );  INSERT INTO Clients (name, surname, status) VALUES ('Flash', 'Thompson', 'Gold'),        ('Peter', 'Parker', 'Basic'),        ('Mary', 'Jane', 'Bronze'),        ('Gwen', 'Stacy', 'Silver'),        ('Harry', 'Osborn', 'Gold'),        ('Ben', 'Reilly', 'Basic'),        ('Miles', 'Morales', 'Basic'),        ('John', 'Jameson', 'Silver'),        ('Curtis', 'Connors', 'Bronze'),        ('Edward', 'Brock', 'Silver');","Напишите запрос, который извлекает из предложенной базы данных следующую информацию обо всех клиентах авиакомпании: имя, фамилия, статус в программе лояльности.  Записи в результирующей таблице должны быть расположены в порядке убывания статуса клиента, при совпадении — в лексикографическом порядке имени клиента.",15,3,"select name, surname, status from Clients  order by   case status   when 'Gold' then 1   when 'Silver' then 2   when 'bronze' then 3   when 'basic' then 4  end, name","SELECT name, surname, status FROM Clients ORDER BY FIELD(status, 'Basic', 'Bronze', 'Silver', 'Gold') DESC, name",
4.11 Условные конструкции ,"DROP TABLE IF EXISTS Results; CREATE TABLE Results (     id      INT AUTO_INCREMENT PRIMARY KEY,     name    VARCHAR(50),     surname VARCHAR(50),     time    TIME );  INSERT INTO Results (name, surname, time) VALUES ('Joel', 'Miller', '02:21:00'),        ('Arthur', 'Morgan', '00:10:00'),        ('Leonhard', 'Euler', '00:59:00'),        ('Alan', 'Wake', '00:32:00'),        ('Alyx', 'Vance', '00:16:00'),        ('Jill', 'Valentine', '00:44:00'),        ('Isaac', 'Clarke', '01:01:00'),        ('Gordon', 'Freeman', '00:17:00'),        ('Alan', 'Turing', '00:31:00'),        ('Stephen', 'Hawking', '00:23:00'),        ('Ryu', 'Hayabusa', '00:41:00'),        ('Johnny', 'Silverhand', '00:11:00'),        ('Samus', 'Aran', '00:29:00'),        ('Nathan', 'Drake', '00:54:00'),        ('Erwin', 'Schrodinger', '00:30:00'),        ('Max', 'Payne', '01:00:00'),        ('Tom', 'Nook', '00:12:00'); ","Организация начисляет участникам олимпиады баллы в зависимости от того, сколько времени они затратили на решение. Если участник справился с олимпиадой за 30 и меньше минут, он получит 100 баллов. За каждую лишнюю затраченную минуту участник теряет 1 балл. Таким образом, участник, завершивший олимпиаду за 31 минуту, получит 99 баллов, за 32 минуты — 98 баллов, и так далее. Если же участник затратил на решение олимпиады больше 60 минут, он получит 0 баллов.  Напишите запрос, который извлекает из предложенной базы данных имена и фамилии участников олимпиады, а также определяет количество баллов, набранное каждым из участников.",30,5,"select name, surname,  case   when time_to_sec(time) < 30*60 then 100   when time_to_sec(time) between 1800 and 3600 then 100 - (time_to_sec(time) div 60 - 30)   when time_to_sec(time) > 60*60 then 0  end as score from Results order by score desc, name, surname","SELECT name, surname,        CASE            WHEN time > '01:00:00' THEN 0            WHEN time < '00:30:00' THEN 100            ELSE 100 - MINUTE(TIMEDIFF(time, '00:30:00'))        END AS score FROM Results ORDER BY score DESC, name, surname",
